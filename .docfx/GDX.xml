<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GDX</name>
    </assembly>
    <members>
        <member name="T:GDX.Localization">
            <summary>
                A collection of localization related helper utilities.
            </summary>
        </member>
        <member name="T:GDX.Localization.Language">
            <summary>
                A list of supported languages.
            </summary>
            <remarks>
                This does not differentiate between things like French Canadian and French.
            </remarks>
        </member>
        <member name="F:GDX.Localization.UtcTimestampFormat">
            <summary>
                The UTC ISO 8601 compliant <see cref="T:System.DateTime" />.<see cref="M:System.DateTime.ToString(System.String)" />.
            </summary>
        </member>
        <member name="F:GDX.Localization.LocalTimestampFormat">
            <summary>
                The local ISO 8601 compliant <see cref="T:System.DateTime" />.<see cref="M:System.DateTime.ToString(System.String)" />.
            </summary>
        </member>
        <member name="F:GDX.Localization.s_readableByteSizes">
            <summary>
                An array of strings representative for file size formats.
            </summary>
        </member>
        <member name="M:GDX.Localization.GetHumanReadableFileSize(System.Int64)">
            <summary>
                Creates a more human readable <see cref="T:System.String" /> of a byte size.
            </summary>
            <example>
                A byte size of 1024, will return a string of 1 KB.
            </example>
            <param name="base2Size">The number of bytes (binary) to measure.</param>
            <returns>A human readable version of the provided <paramref name="base2Size" />.</returns>
        </member>
        <member name="M:GDX.Localization.GetISO639_1(GDX.Localization.Language)">
            <summary>
                <para>Get the ISO 639-1 language code for <paramref name="targetLanguage" />.</para>
            </summary>
            <remarks>Two additional non-compliant values may be returned DEV or DEFAULT.</remarks>
            <param name="targetLanguage">The target <see cref="T:GDX.Localization.Language" />.</param>
            <returns>The language code.</returns>
        </member>
        <member name="M:GDX.Localization.GetIETF(GDX.Localization.Language)">
            <summary>
                <para>Get the IETF language code for <paramref name="targetLanguage" />.</para>
            </summary>
            <remarks>Two additional non-compliant values may be returned DEV or DEFAULT.</remarks>
            <param name="targetLanguage">The target <see cref="T:GDX.Localization.Language" />.</param>
            <returns>The language code.</returns>
        </member>
        <member name="M:GDX.Localization.GetSystemLanguage">
            <summary>
                Get the <see cref="T:GDX.Localization.Language" /> equivalent of the <see cref="T:UnityEngine.SystemLanguage" />.
            </summary>
            <returns>The appropriate <see cref="T:GDX.Localization.Language" />, or default.</returns>
        </member>
        <member name="M:GDX.Localization.GetTimestampFormat(GDX.Localization.Language)">
            <summary>
                Get the localized <see cref="T:System.DateTime" />.<see cref="M:System.DateTime.ToString(System.String)" /> for
                <paramref name="targetLanguage" />.
            </summary>
            <param name="targetLanguage">The target <see cref="T:GDX.Localization.Language" />.</param>
            <returns>The format <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:GDX.Localization.SetDefaultCulture">
            <summary>
                Sets the current threads culture to a defined setting in <see cref="T:GDX.GDXConfig" />.
            </summary>
            <remarks>
                Can be used to avoid issues with culture settings without a Gregorian Calendar. Configurable to automatically
                execute after assemblies are loaded.
            </remarks>
        </member>
        <member name="T:GDX.SemanticVersion">
            <summary>
                A Semantic Versioning structure.
            </summary>
            <remarks>https://semver.org/</remarks>
        </member>
        <member name="F:GDX.SemanticVersion.s_versionIndicators">
            <summary>
                An array of <see cref="T:System.Char" /> used to split versions.
            </summary>
        </member>
        <member name="F:GDX.SemanticVersion.Major">
            <summary>
                Major Version.
            </summary>
            <remarks>Is incremented when you make incompatible API changes.</remarks>
        </member>
        <member name="F:GDX.SemanticVersion.Minor">
            <summary>
                Minor Version.
            </summary>
            <remarks>Is incremented when you add functionality in a backwards-compatible manner.</remarks>
        </member>
        <member name="F:GDX.SemanticVersion.Patch">
            <summary>
                Patch Version
            </summary>
            <remarks>Is incremented when you make backwards-compatible fixes.</remarks>
        </member>
        <member name="M:GDX.SemanticVersion.#ctor(System.String)">
            <summary>
                Create a <see cref="T:GDX.SemanticVersion" /> based on a formatted <see cref="T:System.String" />.
            </summary>
            <param name="version">A formatted version semantic version string (2020.1.0).</param>
        </member>
        <member name="M:GDX.SemanticVersion.op_GreaterThan(GDX.SemanticVersion,GDX.SemanticVersion)">
            <summary>
                Determine if <see cref="T:GDX.SemanticVersion" /> is greater than another <see cref="T:GDX.SemanticVersion" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <returns>Returns the result of a GREATER THAN operation on two <see cref="T:GDX.SemanticVersion" /> values.</returns>
        </member>
        <member name="M:GDX.SemanticVersion.op_GreaterThanOrEqual(GDX.SemanticVersion,GDX.SemanticVersion)">
            <summary>
                Determine if <see cref="T:GDX.SemanticVersion" /> is greater than or equal to another <see cref="T:GDX.SemanticVersion" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <returns>
                Returns the result of a GREATER THAN OR EQUAL operation on two <see cref="T:GDX.SemanticVersion" />
                values.
            </returns>
        </member>
        <member name="M:GDX.SemanticVersion.op_LessThanOrEqual(GDX.SemanticVersion,GDX.SemanticVersion)">
            <summary>
                Determine if <see cref="T:GDX.SemanticVersion" /> is less than or equal to another <see cref="T:GDX.SemanticVersion" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <returns>
                Returns the result of a LESS THAN OR EQUAL operation on two <see cref="T:GDX.SemanticVersion" />
                values.
            </returns>
        </member>
        <member name="M:GDX.SemanticVersion.op_LessThan(GDX.SemanticVersion,GDX.SemanticVersion)">
            <summary>
                Determine if <see cref="T:GDX.SemanticVersion" /> is less than another <see cref="T:GDX.SemanticVersion" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <returns>Returns the result of a LESS THAN operation on two <see cref="T:GDX.SemanticVersion" /> values.</returns>
        </member>
        <member name="M:GDX.SemanticVersion.op_Equality(GDX.SemanticVersion,GDX.SemanticVersion)">
            <summary>
                Determine if <see cref="T:GDX.SemanticVersion" /> is equal to another <see cref="T:GDX.SemanticVersion" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <returns>Returns the result of a EQUALITY operation on two <see cref="T:GDX.SemanticVersion" /> values.</returns>
        </member>
        <member name="M:GDX.SemanticVersion.op_Inequality(GDX.SemanticVersion,GDX.SemanticVersion)">
            <summary>
                Determine if <see cref="T:GDX.SemanticVersion" /> does not equal than another <see cref="T:GDX.SemanticVersion" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.SemanticVersion" />.</param>
            <returns>Returns the result of a NOT EQUAL operation on two <see cref="T:GDX.SemanticVersion" /> values.</returns>
        </member>
        <member name="M:GDX.SemanticVersion.Equals(System.Object)">
            <summary>
                Does the <paramref name="obj" /> equal this <see cref="T:GDX.SemanticVersion" />.
            </summary>
            <param name="obj">An <see cref="T:System.Object" /> to compare against.</param>
            <returns>Returns the result of an EQUALITY operation.</returns>
        </member>
        <member name="M:GDX.SemanticVersion.GetHashCode">
            <summary>
                Get the hash code of the <see cref="T:GDX.SemanticVersion" />.
            </summary>
            <returns>A <see cref="T:System.Int32" /> value.</returns>
        </member>
        <member name="M:GDX.SemanticVersion.Equals(GDX.SemanticVersion)">
            <summary>
                Does the <paramref name="otherSemanticVersion" /> equal the <see cref="T:GDX.SemanticVersion" />.
            </summary>
            <param name="otherSemanticVersion"></param>
            <returns>
                The results of checking the <see cref="F:GDX.SemanticVersion.Major" />/<see cref="F:GDX.SemanticVersion.Minor" />/
                <see cref="F:GDX.SemanticVersion.Patch" /> for equality.
            </returns>
        </member>
        <member name="T:GDX.Developer.Conditionals">
            <summary>
                Constant indicators about conditional supports within the GDX package. Helpful indicators of which features are
                available through preprocessor gating.
            </summary>
        </member>
        <member name="F:GDX.Developer.Conditionals.HasAddressablesPackage">
            <summary>
                Is a compatible version of the Addressables package present in the project?
            </summary>
        </member>
        <member name="F:GDX.Developer.Conditionals.HasBurstPackage">
            <summary>
                Is a compatible version of the Burst package present in the project?
            </summary>
        </member>
        <member name="F:GDX.Developer.Conditionals.HasMathematicsPackage">
            <summary>
                Is a compatible version of the Mathematics package present in the project?
            </summary>
        </member>
        <member name="F:GDX.Developer.Conditionals.HasPlatformsPackage">
            <summary>
                Is a compatible version of the Platforms package present in the project?
            </summary>
        </member>
        <member name="F:GDX.Developer.Conditionals.HasVisualScriptingPackage">
            <summary>
                Is a compatible version of the Visual Scripting package present in the project?
            </summary>
        </member>
        <member name="T:GDX.Developer.CommandLineParser">
            <summary>
                A simplified commandline parser that handles arguments which follow the <c>--FLAG</c> or <c>--KEY=VALUE</c> format.
                Automatically initialized during normal runtime operations, however can be manually triggered for author time
                use cases as well.
            </summary>
            <remarks>
                <para>
                    The prefix and divider are configurable via the <see cref="T:GDX.GDXConfig" />, however the always, the <c>FLAG</c>
                    and <c>KEY</c> will be Uppercase.
                </para>
            </remarks>
        </member>
        <member name="F:GDX.Developer.CommandLineParser.Arguments">
            <summary>
                The processed arguments found after parsing the arguments
            </summary>
        </member>
        <member name="F:GDX.Developer.CommandLineParser.Flags">
            <summary>
                The processed flags found in the arguments.
            </summary>
        </member>
        <member name="M:GDX.Developer.CommandLineParser.ParseArguments">
            <summary>
                Process the environment's commandline arguments into <see cref="F:GDX.Developer.CommandLineParser.Arguments" /> and <see cref="F:GDX.Developer.CommandLineParser.Flags" />.
            </summary>
            <remarks>
                <para>This is automatically executed during runtime.</para>
            </remarks>
        </member>
        <member name="M:GDX.Developer.CommandLineParser.ProcessArguments(System.String[],System.Boolean)">
            <summary>
                Process an array of arguments into <see cref="F:GDX.Developer.CommandLineParser.Arguments" /> and <see cref="F:GDX.Developer.CommandLineParser.Flags" />.
            </summary>
            <param name="argumentArray">An array of arguments to process.</param>
            <param name="shouldClear">Should the storage containers be cleared.</param>
        </member>
        <member name="T:GDX.IListExtensions">
            <summary>
                <see cref="T:System.Collections.Generic.IList`1" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.IListExtensions.AddUniqueItem``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Add an item to a <see cref="T:System.Collections.Generic.IList`1" />, but only if it is not already contained.
            </summary>
            <param name="targetList">The <see cref="T:System.Collections.Generic.IList`1" /> to add too.</param>
            <param name="targetItem">The target object to add..</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false if this operation was able to add the item.</returns>
        </member>
        <member name="M:GDX.IListExtensions.AddUniqueValue``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Add a value to a <see cref="T:System.Collections.Generic.IList`1" />, but only if it is not already contained.
            </summary>
            <param name="targetList">The <see cref="T:System.Collections.Generic.IList`1" /> to add too.</param>
            <param name="targetValue">The target value to add..</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false if this operation was able to add the value.</returns>
        </member>
        <member name="M:GDX.IListExtensions.ContainsItem``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                <para>Does <paramref name="targetList" /> contain <paramref name="targetItem" />?</para>
            </summary>
            <remarks>Avoids using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</remarks>
            <param name="targetList">The <see cref="T:System.Collections.Generic.IList`1" /> to look in.</param>
            <param name="targetItem">The target object to look for.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.IListExtensions.ContainsValue``1(System.Collections.Generic.IList{``0},System.Object)">
            <summary>
                <para>Does <paramref name="targetList" /> contain <paramref name="targetValue" />?</para>
            </summary>
            <remarks>
                WARNING: This will box the <paramref name="targetValue" />. You should probably write your own explicit
                implementation.
            </remarks>
            <param name="targetList">The <see cref="T:System.Collections.Generic.IList`1" /> to look in.</param>
            <param name="targetValue">The value to look for.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.IListExtensions.RemoveFirstItem``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                <para>Removes the first <paramref name="targetItem" /> from the provided <paramref name="targetList" />.</para>
            </summary>
            <remarks>Avoids using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</remarks>
            <param name="targetList">The target <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <param name="targetItem">The target object to remove from the <paramref name="targetList" />.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false if the item was removed.</returns>
        </member>
        <member name="M:GDX.IListExtensions.RemoveFirstValue``1(System.Collections.Generic.IList{``0},System.Object)">
            <summary>
                Removes the first <paramref name="targetValue" /> from the provided <paramref name="targetList" />.
            </summary>
            <remarks>
                <para>
                    WARNING: This will box the <paramref name="targetValue" />. You should probably write your own explicit
                    implementation.
                </para>
            </remarks>
            <param name="targetList">The target <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <param name="targetValue">The value to remove from the <paramref name="targetList" />.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false if a value was removed.</returns>
        </member>
        <member name="M:GDX.IListExtensions.RemoveItems``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                <para>Removes all <paramref name="targetItem" /> from the provided <paramref name="targetList" />.</para>
            </summary>
            <remarks>Avoids using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</remarks>
            <param name="targetList">The target <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <param name="targetItem">The target object to remove from the <paramref name="targetList" />.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false if the item was removed.</returns>
        </member>
        <member name="M:GDX.IListExtensions.RemoveValues``1(System.Collections.Generic.IList{``0},System.Object)">
            <summary>
                Removes all <paramref name="targetValue" /> from the provided <paramref name="targetList" />.
            </summary>
            <remarks>
                <para>
                    WARNING: This will box the <paramref name="targetValue" />. You should probably write your own explicit
                    implementation.
                </para>
            </remarks>
            <param name="targetList">The target <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <param name="targetValue">The value to remove from the <paramref name="targetList" />.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false if values were removed.</returns>
        </member>
        <member name="M:GDX.IListExtensions.RemoveItemSwap``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                <para>
                    Replaces the object found at the provided <paramref name="index" /> with the last object in
                    <paramref name="targetList" />, then removes the last item from the <paramref name="targetList" />.
                </para>
            </summary>
            <remarks>
                This make sure that you are always removing from the end of a
                <see cref="T:System.Collections.Generic.IList`1" />.
            </remarks>
            <param name="targetList">The target <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <param name="index">The index of the item to remove.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
        </member>
        <member name="M:GDX.IListExtensions.RemoveLastItem``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                <para>Removes the last <paramref name="targetItem" /> from the provided <paramref name="targetList" />.</para>
            </summary>
            <remarks>Avoids using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</remarks>
            <param name="targetList">The target <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <param name="targetItem">The target object to remove from the <paramref name="targetList" />.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false if the item was removed.</returns>
        </member>
        <member name="M:GDX.IListExtensions.RemoveLastValue``1(System.Collections.Generic.IList{``0},System.Object)">
            <summary>
                Removes the last <paramref name="targetValue" /> from the provided <paramref name="targetList" />.
            </summary>
            <remarks>
                <para>
                    WARNING: This will box the <paramref name="targetValue" />. You should probably write your own explicit
                    implementation.
                </para>
            </remarks>
            <param name="targetList">The target <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <param name="targetValue">The value to remove from the <paramref name="targetList" />.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
            <returns>true/false if a value was removed.</returns>
        </member>
        <member name="M:GDX.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
                Shuffle the items in the <paramref name="targetList" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="targetList">The target <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
        </member>
        <member name="T:GDX.Collections.Generic.NativeArray2D`1">
            <summary>
                A 2-dimension <see cref="T:Unity.Collections.NativeArray`1" /> backed array.
            </summary>
            <remarks>
                The <see cref="T:GDX.Collections.Generic.NativeArray2D`1" /> is backed by a <see cref="T:Unity.Collections.NativeArray`1" /> which requires
                UnityEngine.CoreModule.dll.
            </remarks>
            <typeparam name="T">Type of objects.</typeparam>
        </member>
        <member name="F:GDX.Collections.Generic.NativeArray2D`1.Array">
            <summary>
                The backing <see cref="T:Unity.Collections.NativeArray`1" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.NativeArray2D`1.ColumnCount">
            <summary>
                The length of each pseudo-array in the dataset.
            </summary>
            <remarks>CAUTION! Changing this will alter the understanding of the data.</remarks>
        </member>
        <member name="F:GDX.Collections.Generic.NativeArray2D`1.RowCount">
            <summary>
                The number of pseudo-arrays created to support the dimensionality.
            </summary>
            <remarks>CAUTION! Changing this will alter the understanding of the data.</remarks>
        </member>
        <member name="M:GDX.Collections.Generic.NativeArray2D`1.#ctor(System.Int32,System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.NativeArray2D`1" />.
            </summary>
            <param name="columnCount">The number of columns (X).</param>
            <param name="rowCount">The number of rows (Y).</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="P:GDX.Collections.Generic.NativeArray2D`1.Item(System.Int32,System.Int32)">
            <summary>
                Get a typed object at a specific 2-dimensional index in <see cref="F:GDX.Collections.Generic.NativeArray2D`1.Array" />.
            </summary>
            <param name="x">The column number (X).</param>
            <param name="y">The row number (Y).</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeArray2D`1.AddRows(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Add additional rows to the dataset.
            </summary>
            <param name="numberOfNewRows">The number of rows/arrays to add.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeArray2D`1.Dispose">
            <summary>
                Properly dispose of <see cref="F:GDX.Collections.Generic.NativeArray2D`1.Array" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.NativeArray2D`1.AddColumns(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Add additional columns to the dataset.
            </summary>
            <param name="numberOfNewColumns">The number of columns add.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="T:GDX.Collections.Generic.SerializableDictionary`2">
            <summary>
                A Unity serializable <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary>
            <remarks>
                <para>
                    This will NOT work with <see cref="T:System.Object" /> based objects, use <see cref="T:UnityEngine.Object" /> if
                    you must. While .NET has solutions for creating custom serialization paths, Unity uses its own system to
                    serialize data into YAML structures. This also assumes that the types provided can be serialized by Unity.
                </para>
                <para>
                    The process of serializing and deserializing this dictionary should not be considered performant.
                </para>
            </remarks>
            <typeparam name="TKey">The dictionary's key <see cref="T:System.Type" />.</typeparam>
            <typeparam name="TValue">The dictionary's value <see cref="T:System.Type" />.</typeparam>
        </member>
        <member name="F:GDX.Collections.Generic.SerializableDictionary`2.isSerializable">
            <summary>
                Is the dictionary completely capable of being serialized by Unity?
            </summary>
            <remarks>This field is determined/cached in the constructor.</remarks>
        </member>
        <member name="F:GDX.Collections.Generic.SerializableDictionary`2.serializedLength">
            <summary>
                The length of the serialized data arrays.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.SerializableDictionary`2.serializedKeys">
            <summary>
                An array of all of the keys, in order, used to recreate the base <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.SerializableDictionary`2.serializedValues">
            <summary>
                An array of all of the values, in order, used to recreate the base <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.SerializableDictionary`2.#ctor">
            <summary>
                Type constructor.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.SerializableDictionary`2.GetSerializedDataLength">
            <summary>
                Get the length of the serialized data arrays.
            </summary>
            <returns>An integer value representing the count.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.SerializableDictionary`2.IsNullableKey">
            <summary>
                Is the dictionaries key nullable?
            </summary>
            <returns>true/false if nullable.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.SerializableDictionary`2.IsSerializableType(System.Type)">
            <summary>
                Is the <paramref name="type" /> capable of being serialized by the
                <see cref="T:GDX.Collections.Generic.SerializableDictionary`2" />, utilizing Unity's own serialization system?
            </summary>
            <returns>true/false if the type is valid.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.SerializableDictionary`2.LoadSerializedData(System.Boolean)">
            <summary>
                Load the data into the <see cref="T:System.Collections.Generic.Dictionary`2" /> cached in the serialized data.
            </summary>
            <param name="clearAfterLoad">Should the serialized data be cleared after loading?</param>
        </member>
        <member name="M:GDX.Collections.Generic.SerializableDictionary`2.OnAfterDeserialize">
            <summary>
                Rehydrate the serialized data arrays back into a cohesive <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary>
            <remarks>Invoked by Unity, calls <see cref="M:GDX.Collections.Generic.SerializableDictionary`2.LoadSerializedData(System.Boolean)" />.</remarks>
        </member>
        <member name="M:GDX.Collections.Generic.SerializableDictionary`2.OnBeforeSerialize">
            <summary>
                Build out serialized data arrays and associative data, used to rehydrate during deserialization.
            </summary>
            <remarks>Invoked by Unity, calls <see cref="M:GDX.Collections.Generic.SerializableDictionary`2.SaveSerializedData" />.</remarks>
        </member>
        <member name="M:GDX.Collections.Generic.SerializableDictionary`2.OverwriteSerializedData(`0[],`1[])">
            <summary>
                Overwrite data in the serialized arrays with the provided data.
            </summary>
            <param name="keyArray">An array of keys.</param>
            <param name="valueArray">An array of values.</param>
        </member>
        <member name="M:GDX.Collections.Generic.SerializableDictionary`2.SaveSerializedData">
            <summary>
                Fill serializable arrays from dictionary data.
            </summary>
            <remarks>We will always create the arrays so the property drawers function nicely.</remarks>
        </member>
        <member name="T:GDX.Collections.Generic.NativeSimpleList`1">
            <summary>
                A <see cref="T:Unity.Collections.NativeArray`1" /> backed <see cref="T:GDX.Collections.Generic.SimpleList`1" />.
            </summary>
            <remarks>
                The <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" /> is backed by a <see cref="T:Unity.Collections.NativeArray`1" /> which
                requires
                UnityEngine.CoreModule.dll.
            </remarks>
            <typeparam name="T">The type of <see cref="T:System.Object" />s contained within.</typeparam>
        </member>
        <member name="F:GDX.Collections.Generic.NativeSimpleList`1.Array">
            <summary>
                Internal array of backed data for the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.NativeSimpleList`1.Count">
            <summary>
                Number of elements.
            </summary>
            <remarks>CAUTION! Changing this will alter the understanding of the data.</remarks>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.#ctor(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.SimpleList`1" /> with an initial <paramref name="capacity" />.
            </summary>
            <param name="capacity">An initial sizing for the <see cref="F:GDX.Collections.Generic.NativeSimpleList`1.Array" />.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.#ctor(Unity.Collections.NativeArray{`0})">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" /> providing an existing <paramref name="arrayToUse" />.
            </summary>
            <param name="arrayToUse">An existing array to use in the <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" />.</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.#ctor(Unity.Collections.NativeArray{`0},System.Int32)">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" /> providing an existing <paramref name="arrayToUse" /> and setting the
                <see cref="F:GDX.Collections.Generic.NativeSimpleList`1.Count" />.
            </summary>
            <param name="arrayToUse">An existing array to use in the <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" />.</param>
            <param name="count">An existing element count.</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.AddUnchecked(`0)">
            <summary>
                Add an item to the <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" /> without checking the <see cref="F:GDX.Collections.Generic.NativeSimpleList`1.Array" /> size.
            </summary>
            <param name="item">A typed <see cref="T:System.Object" /> to add.</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.AddWithExpandCheck(`0,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Add an item to the <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" />, checking if <see cref="F:GDX.Collections.Generic.NativeSimpleList`1.Array" /> needs to be resized.
            </summary>
            <param name="item">A typed <see cref="T:System.Object" /> to add.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.Clear">
            <summary>
                Clear out the <see cref="F:GDX.Collections.Generic.NativeSimpleList`1.Array" /> in <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" /> and sets the <see cref="F:GDX.Collections.Generic.NativeSimpleList`1.Count" /> to 0.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.Dispose">
            <summary>
                Properly dispose of the <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.Insert(`0,System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Insert an item into the <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" />, checking if <see cref="F:GDX.Collections.Generic.NativeSimpleList`1.Array" /> needs to be resized.
            </summary>
            <param name="item">A typed <see cref="T:System.Object" /> to insert.</param>
            <param name="index">The index in <see cref="F:GDX.Collections.Generic.NativeSimpleList`1.Array" /> to add the <paramref name="item" /> at.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.RemoveAt(System.Int32)">
            <summary>
                Remove an item from the <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" /> at a specific <paramref name="index" />.
            </summary>
            <param name="index">The target index.</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleList`1.RemoveFromBack">
            <summary>
                Remove the last element in the <see cref="T:GDX.Collections.Generic.NativeSimpleList`1" />.
            </summary>
        </member>
        <member name="T:GDX.Collections.Generic.SimpleList`1">
            <summary>
                A <see cref="T:System.Collections.Generic.List`1" />-like data structure.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Object" />s contained within.</typeparam>
        </member>
        <member name="F:GDX.Collections.Generic.SimpleList`1.Array">
            <summary>
                Internal array of backed data for the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.SimpleList`1.Count">
            <summary>
                The current number of occupied elements in the <see cref="T:GDX.Collections.Generic.CircularBuffer`1" />.
            </summary>
            <remarks>CAUTION! Changing this will alter the understanding of the data.</remarks>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.#ctor(System.Int32)">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.SimpleList`1" /> with an initial <paramref name="capacity" />.
            </summary>
            <param name="capacity">An initial sizing for the <see cref="F:GDX.Collections.Generic.SimpleList`1.Array" />.</param>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.#ctor(`0[])">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.SimpleList`1" /> providing an existing <paramref name="arrayToUse" />.
            </summary>
            <param name="arrayToUse">An existing array to use in the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</param>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.#ctor(`0[],System.Int32)">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.SimpleList`1" /> providing an existing <paramref name="arrayToUse" /> and setting the
                <see cref="F:GDX.Collections.Generic.SimpleList`1.Count" />.
            </summary>
            <param name="arrayToUse">An existing array to use in the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</param>
            <param name="count">An existing element count.</param>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.AddUnchecked(`0)">
            <summary>
                Add an item to the <see cref="T:GDX.Collections.Generic.SimpleList`1" /> without checking the <see cref="F:GDX.Collections.Generic.SimpleList`1.Array" /> size.
            </summary>
            <param name="item">A typed <see cref="T:System.Object" /> to add.</param>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.AddWithExpandCheck(`0)">
            <summary>
                Add an item to the <see cref="T:GDX.Collections.Generic.SimpleList`1" />, checking if <see cref="F:GDX.Collections.Generic.SimpleList`1.Array" /> needs to be resized.
            </summary>
            <param name="item">A typed <see cref="T:System.Object" /> to add.</param>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.AddWithExpandCheck(`0,System.Int32)">
            <summary>
                Add an item to the <see cref="T:GDX.Collections.Generic.SimpleList`1" />, checking if <see cref="F:GDX.Collections.Generic.SimpleList`1.Array" /> needs to be resized.
            </summary>
            <param name="item">A typed <see cref="T:System.Object" /> to add.</param>
            <param name="howMuchToExpand">How much to expand the array by.</param>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.Clear">
            <summary>
                Clear out the <see cref="F:GDX.Collections.Generic.SimpleList`1.Array" /> in <see cref="T:GDX.Collections.Generic.SimpleList`1" /> and sets the <see cref="F:GDX.Collections.Generic.SimpleList`1.Count" /> to 0.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.Insert(`0,System.Int32)">
            <summary>
                Insert an item into the <see cref="T:GDX.Collections.Generic.SimpleList`1" />, checking if <see cref="F:GDX.Collections.Generic.SimpleList`1.Array" /> needs to be resized.
            </summary>
            <param name="item">A typed <see cref="T:System.Object" /> to insert.</param>
            <param name="index">The index in <see cref="F:GDX.Collections.Generic.SimpleList`1.Array" /> to add the <paramref name="item" /> at.</param>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.RemoveAt(System.Int32)">
            <summary>
                Remove an item from the <see cref="T:GDX.Collections.Generic.SimpleList`1" /> at a specific <paramref name="index" />.
            </summary>
            <param name="index">The target index.</param>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.RemoveFromBack">
            <summary>
                Remove the last element in the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.SimpleList`1.Reserve(System.Int32)">
            <summary>
                Resizes the <see cref="F:GDX.Collections.Generic.SimpleList`1.Array" />, ensuring there are the provided number of empty spots in it.
            </summary>
            <param name="numberToReserve">Number of desired empty spots.</param>
        </member>
        <member name="T:GDX.Collections.Generic.NativeUniformArray3D`1">
            <summary>
                A 3-Dimensional <see cref="T:Unity.Collections.NativeArray`1" /> backed array.
            </summary>
            <remarks>
                The <see cref="T:GDX.Collections.Generic.NativeArray2D`1" /> is backed by a <see cref="T:Unity.Collections.NativeArray`1" /> which requires
                UnityEngine.CoreModule.dll.
            </remarks>
            <typeparam name="T">Type of objects.</typeparam>
        </member>
        <member name="F:GDX.Collections.Generic.NativeUniformArray3D`1.Array">
            <summary>
                The backing <see cref="T:Unity.Collections.NativeArray`1" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.NativeUniformArray3D`1.Length">
            <summary>
                The length of <see cref="F:GDX.Collections.Generic.NativeUniformArray3D`1.Array" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.NativeUniformArray3D`1.Stride">
            <summary>
                The stride of each dimensional segment in <see cref="F:GDX.Collections.Generic.NativeUniformArray3D`1.Array" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.NativeUniformArray3D`1._strideSquared">
            <summary>
                Cached squared version of <see cref="F:GDX.Collections.Generic.NativeUniformArray3D`1.Stride" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.NativeUniformArray3D`1.#ctor(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.NativeUniformArray3D`1" /> with a uniform dimensional length.
            </summary>
            <remarks></remarks>
            <param name="stride">X length, Y length and Z length will all be set to this value.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="P:GDX.Collections.Generic.NativeUniformArray3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
                Access a specific location in the voxel.
            </summary>
            <param name="x">X location index.</param>
            <param name="y">Y location index.</param>
            <param name="z">Z location index.</param>
        </member>
        <member name="P:GDX.Collections.Generic.NativeUniformArray3D`1.Item(Unity.Mathematics.int3)">
            <summary>
                Access a specific location in the voxel.
            </summary>
            <param name="index">A 3-Dimensional index.</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeUniformArray3D`1.Dispose">
            <summary>
                Properly dispose of the <see cref="T:GDX.Collections.Generic.NativeUniformArray3D`1" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.NativeUniformArray3D`1.GetFromIndex(System.Int32)">
            <summary>
                Get the 3-Dimensional index of a flat array index.
            </summary>
            <param name="idx">A flat array index.</param>
            <returns>A 3-Dimensional voxel index.</returns>
        </member>
        <member name="T:GDX.Collections.Generic.NativeSimpleQueue`1">
            <summary>
                A <see cref="T:Unity.Collections.NativeArray`1" /> backed simplified first-in, first-out (FIFO) data structure.
            </summary>
            <remarks>
                The <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" /> is backed by a <see cref="T:Unity.Collections.NativeArray`1" /> which requires
                UnityEngine.CoreModule.dll.
            </remarks>
            <typeparam name="T">The type of <see cref="T:System.Object" />s contained within.</typeparam>
        </member>
        <member name="F:GDX.Collections.Generic.NativeSimpleQueue`1.MinimumGrow">
            <summary>
                The minimum growth amount of the internal <see cref="F:GDX.Collections.Generic.NativeSimpleQueue`1.Array" />'s length.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.NativeSimpleQueue`1.Array">
            <summary>
                Internal <see cref="T:Unity.Collections.NativeArray`1" /> of backed data for the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.NativeSimpleQueue`1.Count">
            <summary>
                Number of elements.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.NativeSimpleQueue`1.EndIndex">
            <summary>
                Last valid element (tail) index in the queue.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.NativeSimpleQueue`1.FirstIndex">
            <summary>
                First valid element (head) index in the queue.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleQueue`1.#ctor(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Create a new <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" />.
            </summary>
            <param name="capacity">The maximum number of items allowed in the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" /></param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleQueue`1.Clear">
            <summary>
                Clear the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleQueue`1.Dequeue">
            <summary>
                Pop (remove and return) the first element from the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" />.
            </summary>
            <returns>The first element.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleQueue`1.Dispose">
            <summary>
                Properly dispose of the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleQueue`1.Enqueue(`0,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Add an <paramref name="item" /> to the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" /> at its end..
            </summary>
            <param name="item">The typed <see cref="T:System.Object" /> to add.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleQueue`1.GetElementAt(System.Int32)">
            <summary>
                Retrieve the element at the provided <paramref name="index" />.
            </summary>
            <param name="index">The target <see cref="T:System.Object" /> index.</param>
            <returns>The target element.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleQueue`1.Peek">
            <summary>
                Retrieve the first element from the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" />.
            </summary>
            <returns>The first element.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleQueue`1.TrimExcess(Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Shrink the capacity of the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" /> to fit its contents.
            </summary>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="M:GDX.Collections.Generic.NativeSimpleQueue`1.SetCapacity(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Resize the capacity of the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" />.
            </summary>
            <param name="capacity">The desired capacity for the <see cref="T:GDX.Collections.Generic.NativeSimpleQueue`1" /></param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="T:GDX.Collections.Generic.CircularBuffer`1">
            <summary>
                A sized buffer which loops back over itself as elements are used.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Object" />s contained within.</typeparam>
        </member>
        <member name="F:GDX.Collections.Generic.CircularBuffer`1.Array">
            <summary>
                Internal array of backed data for the <see cref="T:GDX.Collections.Generic.CircularBuffer`1" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.CircularBuffer`1.Capacity">
            <summary>
                The cached array length for <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Generic.CircularBuffer`1.Count">
            <summary>
                The current size of occupied elements in the <see cref="T:GDX.Collections.Generic.CircularBuffer`1" />.
            </summary>
            <remarks>CAUTION! Changing this will alter the understanding of the data.</remarks>
        </member>
        <member name="F:GDX.Collections.Generic.CircularBuffer`1.EndIndex">
            <summary>
                The index of the last item in <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
            <remarks>CAUTION! Changing this will alter the understanding of the data.</remarks>
        </member>
        <member name="F:GDX.Collections.Generic.CircularBuffer`1.StartIndex">
            <summary>
                The index of the first item in <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
            <remarks>CAUTION! Changing this will alter the understanding of the data.</remarks>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.CircularBuffer`1" /> with a <paramref name="capacity" />.
            </summary>
            <param name="capacity">The maximum number of items allowed in the <see cref="T:GDX.Collections.Generic.CircularBuffer`1" /></param>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.#ctor(System.Int32,`0[])">
            <summary>
                Create a <see cref="T:GDX.Collections.Generic.CircularBuffer`1" /> with a <paramref name="capacity" />, filling with
                <paramref name="targetItems"/>.
            </summary>
            <param name="capacity">The maximum number of items allowed in the <see cref="T:GDX.Collections.Generic.CircularBuffer`1" /></param>
            <param name="targetItems">An array of values to fill the <see cref="T:GDX.Collections.Generic.CircularBuffer`1" /> with.</param>
            <exception cref="T:System.ArgumentException">
                Invalid number of entries provided to the <see cref="T:GDX.Collections.Generic.CircularBuffer`1" />
                constructor.
            </exception>
            <exception cref="T:System.ArgumentNullException">No items were provided to the <see cref="T:GDX.Collections.Generic.CircularBuffer`1" /> constructor.</exception>
        </member>
        <member name="P:GDX.Collections.Generic.CircularBuffer`1.Item(System.Int32)">
            <summary>
                Access item at <paramref name="pseudoIndex" />.
            </summary>
            <param name="pseudoIndex"></param>
            <exception cref="T:System.IndexOutOfRangeException">Provided index is out of buffers range.</exception>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.GetEnumerator">
            <summary>
                Get <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" /> Enumerator.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Get <see cref="T:GDX.Collections.Generic.CircularBuffer`1" /> Enumerator.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:GDX.Collections.Generic.CircularBuffer`1" />.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.Add(`0)">
            <summary>
                Add an <paramref name="item" /> to the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
            <param name="item">The typed <see cref="T:System.Object" /> to add.</param>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.Clear">
            <summary>
                Clear all values of the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.GetBack">
            <summary>
                Get the last item in the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
            <returns>The last typed object in <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.GetFront">
            <summary>
                Get the first item in the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
            <returns>The first typed object in <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.IsEmpty">
            <summary>
                Does the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" /> have any items in it?
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.IsFull">
            <summary>
                Is the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" /> at capacity?
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.PopBack">
            <summary>
                Remove an item from the end of the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.PopFront">
            <summary>
                Remove an item from the start of the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.PushBack(`0)">
            <summary>
                Add an item to the end of the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
            <param name="targetItem">The item to add to the end of <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.</param>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.PushFront(`0)">
            <summary>
                Add an item to the start of the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
            <param name="targetItem">The item to add to the start of <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.</param>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.ToArray">
            <summary>
                Copy <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" /> to an array of the same type.
            </summary>
            <returns>A copied version of the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" /> as an array.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.ArrayOne">
            <summary>
                Get the first array segment of the desired ordered array in the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
            <remarks>
                This is done because the arrays actual order may wrap around from the end of <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />, to the start.
            </remarks>
            <returns>An <see cref="T:System.ArraySegment`1" /> representing the first part of the ordered data in <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.</returns>
        </member>
        <member name="M:GDX.Collections.Generic.CircularBuffer`1.ArrayTwo">
            <summary>
                Get the second array segment of the desired ordered array in the <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.
            </summary>
            <remarks>
                This is done because the arrays actual order may wrap around from the end of <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />, to the start.
            </remarks>
            <returns>An <see cref="T:System.ArraySegment`1" /> representing the end part of the ordered data in <see cref="F:GDX.Collections.Generic.CircularBuffer`1.Array" />.</returns>
        </member>
        <member name="T:GDX.Collections.BitArray8">
            <summary>
                A 8-bit array.
            </summary>
            <example>
                Useful for packing a bunch of data with known indices tightly.
                <code>
                    if(myBitArray8[1])
                    {
                        BeAwesome();
                    }
                </code>
            </example>
        </member>
        <member name="F:GDX.Collections.BitArray8.Bits0">
            <summary>
                First reserved <see cref="T:System.Byte" /> memory block (8-bits).
            </summary>
            <remarks>Indices 0-7</remarks>
        </member>
        <member name="M:GDX.Collections.BitArray8.#ctor(System.Byte)">
            <summary>
                Create a new <see cref="T:GDX.Collections.BitArray8" /> based on provided <paramref name="bits0" />.
            </summary>
            <param name="bits0">An existing value to be used to create the backing data for a <see cref="T:GDX.Collections.BitArray8" /></param>
        </member>
        <member name="P:GDX.Collections.BitArray8.Item(System.Byte)">
            <summary>
                Access bit in array.
            </summary>
            <param name="index">Target bit index.</param>
        </member>
        <member name="T:GDX.Collections.BitArray16">
            <summary>
                A 16-bit array.
            </summary>
            <example>
                Useful for packing a bunch of data with known indices tightly.
                <code>
                    if(myBitArray16[1])
                    {
                        BeAwesome();
                    }
                </code>
            </example>
        </member>
        <member name="F:GDX.Collections.BitArray16.Bits0">
            <summary>
                First reserved <see cref="T:System.UInt16" /> memory block (16-bits).
            </summary>
            <remarks>Indices 0-15</remarks>
        </member>
        <member name="M:GDX.Collections.BitArray16.#ctor(System.UInt16)">
            <summary>
                Create a new <see cref="T:GDX.Collections.BitArray16" /> based on provided <paramref name="bits0" />.
            </summary>
            <param name="bits0">An existing value to be used to create the backing data for a <see cref="T:GDX.Collections.BitArray16" /></param>
        </member>
        <member name="P:GDX.Collections.BitArray16.Item(System.Byte)">
            <summary>
                Access bit in array.
            </summary>
            <param name="index">Target bit index.</param>
        </member>
        <member name="T:GDX.Collections.BitArray256">
            <summary>
                A 256-bit array.
            </summary>
            <example>
                Useful for packing a bunch of data with known indices tightly.
                <code>
                    if(myBitArray256[1])
                    {
                        BeAwesome();
                    }
                </code>
            </example>
        </member>
        <member name="F:GDX.Collections.BitArray256.Bits0">
            <summary>
                First reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 0-31</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray256.Bits1">
            <summary>
                Second reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 32-63</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray256.Bits2">
            <summary>
                Third reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 64-95</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray256.Bits3">
            <summary>
                Fourth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 96-127</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray256.Bits4">
            <summary>
                Fifth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 128-159</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray256.Bits5">
            <summary>
                Sixth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 160-191</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray256.Bits6">
            <summary>
                Seventh reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 192-223</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray256.Bits7">
            <summary>
                Eighth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 224-255</remarks>
        </member>
        <member name="P:GDX.Collections.BitArray256.Item(System.Int32)">
            <summary>
                Access bit in array.
            </summary>
            <param name="index">Target bit index.</param>
        </member>
        <member name="T:GDX.Collections.Pooling.ListManagedPool">
            <summary>
                A <see cref="T:System.Object" /> <see cref="T:System.Collections.Generic.List`1" /> backed pool implementation.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool.AllowCreateMoreFlag">
            <summary>
                The <see cref="F:GDX.Collections.Pooling.ListManagedPool.Flags" /> index used to determine if the <see cref="T:GDX.Collections.Pooling.ListManagedPool" /> is able to create
                more items as necessary.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool.AllowManagedTeardownFlag">
            <summary>
                The <see cref="F:GDX.Collections.Pooling.ListManagedPool.Flags" /> index used to if <see cref="M:GDX.Collections.Pooling.ListManagedPool.TearDown" /> can be called by a manager.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool.AllowReuseFlag">
            <summary>
                The <see cref="F:GDX.Collections.Pooling.ListManagedPool.Flags" /> index used to determine if items should be reused when the pool is starved.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool.PrewarmPoolFlag">
            <summary>
                The <see cref="F:GDX.Collections.Pooling.ListManagedPool.Flags" /> index used to determine if the pool should create items during its constructor.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._baseObject">
            <summary>
                The object which the pool is based off of, used as a model when creating new items.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._containerObject">
            <summary>
                The object which serves as a container for all objects of the pool.
            </summary>
            <remarks>Used more by implementations of pools, then this base class.</remarks>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._createItemFunc">
            <summary>
                A defined function to create items for the pool.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._inItems">
            <summary>
                A collection of items that are currently contained in the pool for use when spawning items upon request.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._key">
            <summary>
                The absolutely unique identifier for this pool.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._maximumObjects">
            <summary>
                The Maximum number of objects to be managed by the pool.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._minimumObjects">
            <summary>
                The minimum number of objects to be managed by the pool.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._outItems">
            <summary>
                A collection of items that are currently considered out of the pool, that have been spawned.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._inCount">
            <summary>
                A cached count of the number of items contained in <see cref="F:GDX.Collections.Pooling.ListManagedPool._inItems" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool._outCount">
            <summary>
                A cached count of the number of items contained in <see cref="F:GDX.Collections.Pooling.ListManagedPool._outItems" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool.Flags">
            <summary>
                A <see cref="T:GDX.Collections.BitArray8" /> used to store pool based flags, as well as provide additional spots for implementations.
            </summary>
            <remarks>
                Index 0-3 (<see cref="F:GDX.Collections.Pooling.ListManagedPool.AllowCreateMoreFlag" />, <see cref="F:GDX.Collections.Pooling.ListManagedPool.AllowManagedTeardownFlag" />,
                <see cref="F:GDX.Collections.Pooling.ListManagedPool.AllowReuseFlag" />, and <see cref="F:GDX.Collections.Pooling.ListManagedPool.PrewarmPoolFlag" />) are used by the
                <see cref="T:GDX.Collections.Pooling.ListManagedPool" /> itself, leaving 4-7 for additional use.
            </remarks>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool.OnDestroyItem">
            <summary>
                A <c>delegate</c> call made when an item is destroyed by the <see cref="T:GDX.Collections.Pooling.ListManagedPool" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool.OnReturnedToPool">
            <summary>
                A <c>delegate</c> call made when an item is returned to the <see cref="T:GDX.Collections.Pooling.ListManagedPool" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool.OnSpawnedFromPool">
            <summary>
                A <c>delegate</c> call made when an item is spawned from the <see cref="T:GDX.Collections.Pooling.ListManagedPool" />.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ListManagedPool.OnTearDown">
            <summary>
                A <c>delegate</c> call made when a pool is tearing down, before the items are pooled.
            </summary>
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.#ctor(System.Object,System.Func{GDX.Collections.Pooling.ListManagedPool,System.Object},System.Int32,System.Int32,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Create a <see cref="T:GDX.Collections.Pooling.ListManagedPool" />.
            </summary>
            <param name="baseObject">The object which going to be cloned.</param>
            <param name="createItemFunc">The function used to create new items for the pool.</param>
            <param name="minimumObjects">The minimum number of objects to be managed by the pool.</param>
            <param name="maximumObjects">The maximum number of objects to be managed by the pool.</param>
            <param name="containerObject">A reference to an object which should be used as the container for created items.</param>
            <param name="prewarmPool">Should this pool create its items during the constructor?</param>
            <param name="allowCreateMore">Can more items be created as needed when starved for items?</param>
            <param name="allowReuseWhenCapped">Should we reuse oldest items when starving for items?</param>
            <param name="allowManagedTearDown">Does the pool allow a managed tear down event call?</param>
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.CreateItem">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.ForceRemove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.Get(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.GetBaseObject">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.GetKey">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.HasMinimumPooledItems">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.IsAllowedManagedTearDown">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.IsManaged(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.IsPooled(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.Return(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.ReturnAll(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.TearDown">
            <inheritdoc />
        </member>
        <member name="M:GDX.Collections.Pooling.ListManagedPool.Finalize">
            <summary>
                The <see cref="T:GDX.Collections.Pooling.ListManagedPool" /> destructor which unregisters itself from <see cref="T:GDX.Collections.Pooling.ManagedPools" />.
            </summary>
        </member>
        <member name="T:GDX.Collections.Pooling.IManagedPool">
            <summary>
                An interface describing the functionality needed for a pool to be understood by <see cref="T:GDX.Collections.Pooling.ManagedPools" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.CreateItem">
            <summary>
                Create a pooled item and add it to the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.ForceRemove(System.Object)">
            <summary>
                Remove an <paramref name="item" /> from an <see cref="T:GDX.Collections.Pooling.IManagedPool" /> immediately, removing it from tracking and
                not calling any actions on it.
            </summary>
            <param name="item">The target <see cref="T:System.Object" /> to attempt to remove.</param>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.Get(System.Boolean)">
            <summary>
                Get the next available item from an <see cref="T:GDX.Collections.Pooling.IManagedPool" />.
            </summary>
            <returns>An item if available, otherwise null.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.GetBaseObject">
            <summary>
                Return the <see cref="T:System.Object" /> which the pool is built from.
            </summary>
            <returns>The <see cref="T:System.Object" /> the <see cref="T:GDX.Collections.Pooling.IManagedPool" /> is modelled around.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.GetKey">
            <summary>
                Get the unique identifier for the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.
            </summary>
            <returns>A unique identifier.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.HasMinimumPooledItems">
            <summary>
                Does the <see cref="T:GDX.Collections.Pooling.IManagedPool" /> contain the minimum number of items.
            </summary>
            <returns>true/false if enough items are found contained in the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.IsAllowedManagedTearDown">
            <summary>
                Should the<see cref="T:GDX.Collections.Pooling.IManagedPool" /> destroy itself when <see cref="T:GDX.Collections.Pooling.ManagedPools" /> requests a tear down?
            </summary>
            <returns>true/false if flagged to allow for managed tear down / clean up.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.IsManaged(System.Object)">
            <summary>
                Is the <paramref name="item" /> managed by this <see cref="T:GDX.Collections.Pooling.IManagedPool" />?
            </summary>
            <param name="item">The <see cref="T:System.Object" /> to evaluate.</param>
            <returns>true/false if the <paramref name="item" /> is managed by the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.IsPooled(System.Object)">
            <summary>
                Is the provided <paramref name="item" /> found in the <see cref="T:GDX.Collections.Pooling.IManagedPool" />'s internal available pool of
                objects?
            </summary>
            <param name="item">The <paramref name="item" /> to evaluate.</param>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.Return(System.Object)">
            <summary>
                Return the <paramref name="item" /> to the <see cref="T:GDX.Collections.Pooling.IManagedPool" />'s internal collection.
            </summary>
            <param name="item">The <paramref name="item" /> to return to the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.</param>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.ReturnAll(System.Boolean)">
            <summary>
                Return all spawned <see cref="T:System.Object" />s to the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.
            </summary>
            <remarks>Shrinking the pools helps with pools that have grown out of necessity past their maximum size</remarks>
            <param name="shouldShrink">Should the <see cref="T:GDX.Collections.Pooling.IManagedPool" /> be shrunk to its original maximum size?</param>
        </member>
        <member name="M:GDX.Collections.Pooling.IManagedPool.TearDown">
            <summary>
                Destroy all <see cref="T:System.Object" />s associated with the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.
            </summary>
        </member>
        <member name="T:GDX.Collections.Pooling.GameObjectPool">
            <summary>
                <see cref="T:UnityEngine.GameObject" /> based functionality extending the <see cref="T:GDX.Collections.Pooling.ListManagedPool" /> to better support
                <see cref="T:UnityEngine.GameObject" /> patterns.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.GameObjectPool.HasInterfaceFlag">
            <summary>
                The <see cref="T:GDX.Collections.Pooling.ListManagedPool" /> flags index used to determine if the object which is used to create new objects
                has the <see cref="T:GDX.Collections.Pooling.IGameObjectPoolItem" /> interface on a root component.
            </summary>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.CreatePool(UnityEngine.GameObject,UnityEngine.Transform,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Create a <see cref="T:UnityEngine.GameObject" /> based <see cref="T:GDX.Collections.Pooling.ListManagedPool" /> for the provided
                <paramref name="gameObject" />.
            </summary>
            <param name="gameObject">The object which going to be cloned.</param>
            <param name="parent">The container object.</param>
            <param name="minimumObjects">The minimum number of objects to be pooled.</param>
            <param name="maximumObjects">The maximum number of objects to be pooled.</param>
            <param name="allowCreateMore">Can more items be created as needed when starved for items?</param>
            <param name="allowReuseWhenCapped">Should we reuse oldest items when starving for items?</param>
            <param name="allowManagedTearDown">Does the pool allow a managed tear down event call?</param>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.Get(GDX.Collections.Pooling.ListManagedPool,System.Boolean)">
            <summary>
                Get the next available item from the <paramref name="pool"/>.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> created with <see cref="T:GDX.Collections.Pooling.GameObjectPool"/> to pull an item from.</param>
            <param name="triggerOnSpawnedFromPool">Should the <see cref="M:GDX.Collections.Pooling.GameObjectPool.OnSpawnedFromPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)"/> be called when getting this item.</param>
            <returns>A <see cref="T:UnityEngine.GameObject" /> from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>, or null if no item is available.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.Get(GDX.Collections.Pooling.ListManagedPool,UnityEngine.Transform,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Get the next available item from the <paramref name="pool"/> and parent it to a <see cref="T:UnityEngine.Transform"/>.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> created with <see cref="T:GDX.Collections.Pooling.GameObjectPool"/> to pull an item from.</param>
            <param name="parent">The transform parent on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>.</param>
            <param name="worldPositionStays">Ensure that the world position of the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> remains the same through parenting.</param>
            <param name="zeroLocalPosition">Set the local position of the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> to being <see cref="P:UnityEngine.Vector3.zero"/> after parenting.</param>
            <param name="triggerOnSpawnedFromPool">Should the <see cref="M:GDX.Collections.Pooling.GameObjectPool.OnSpawnedFromPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)"/> be called when getting this item.</param>
            <returns>A <see cref="T:UnityEngine.GameObject" /> from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>, or null if no item is available.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.Get(GDX.Collections.Pooling.ListManagedPool,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
                Get the next available item from the <paramref name="pool"/>, parent it to a <see cref="T:UnityEngine.Transform"/>, and then set it's local position and rotation.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> created with <see cref="T:GDX.Collections.Pooling.GameObjectPool"/> to pull an item from.</param>
            <param name="parent">The transform parent on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>.</param>
            <param name="localPosition">The local position to set on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> after parenting.</param>
            <param name="localRotation">The local rotation to set on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> after parenting.</param>
            <param name="triggerOnSpawnedFromPool">Should the <see cref="M:GDX.Collections.Pooling.GameObjectPool.OnSpawnedFromPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)"/> be called when getting this item.</param>
            <returns>A <see cref="T:UnityEngine.GameObject" /> from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>, or null if no item is available.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.Get(GDX.Collections.Pooling.ListManagedPool,UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
                Get the next available item from the <paramref name="pool"/>, parent it to a <see cref="T:UnityEngine.Transform"/>, and then setting it's local position and where it is looking.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> created with <see cref="T:GDX.Collections.Pooling.GameObjectPool"/> to pull an item from.</param>
            <param name="parent">The transform parent on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>.</param>
            <param name="localPosition">The local position to set on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> after parenting.</param>
            <param name="worldLookAtPosition">The world position to have the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> look at</param>
            <param name="triggerOnSpawnedFromPool">Should the <see cref="M:GDX.Collections.Pooling.GameObjectPool.OnSpawnedFromPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)"/> be called when getting this item.</param>
            <returns>A <see cref="T:UnityEngine.GameObject" /> from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>, or null if no item is available.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.Get(GDX.Collections.Pooling.ListManagedPool,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
                Get the next available item from the <paramref name="pool"/>, and set its world position and where it is looking.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> created with <see cref="T:GDX.Collections.Pooling.GameObjectPool"/> to pull an item from.</param>
            <param name="worldPosition">The world position to set on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>.</param>
            <param name="worldLookAtPosition">The world position to have the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> look at</param>
            <param name="triggerOnSpawnedFromPool">Should the <see cref="M:GDX.Collections.Pooling.GameObjectPool.OnSpawnedFromPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)"/> be called when getting this item.</param>
            <returns>A <see cref="T:UnityEngine.GameObject" /> from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>, or null if no item is available.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.Get(GDX.Collections.Pooling.ListManagedPool,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
                Get the next available item from the <paramref name="pool"/>, and set its world position and rotation.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> created with <see cref="T:GDX.Collections.Pooling.GameObjectPool"/> to pull an item from.</param>
            <param name="worldPosition">The world position to set on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>.</param>
            <param name="worldRotation">The world rotation to set on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>.</param>
            <param name="triggerOnSpawnedFromPool">Should the <see cref="M:GDX.Collections.Pooling.GameObjectPool.OnSpawnedFromPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)"/> be called when getting this item.</param>
            <returns>A <see cref="T:UnityEngine.GameObject" /> from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>, or null if no item is available.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.Get(GDX.Collections.Pooling.ListManagedPool,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,System.Boolean)">
            <summary>
                Get the next available item from the <paramref name="pool"/>, and set its world position and rotation after parenting.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> created with <see cref="T:GDX.Collections.Pooling.GameObjectPool"/> to pull an item from.</param>
            <param name="worldPosition">The world position to set on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> after parenting.</param>
            <param name="worldRotation">The world rotation to set on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> after parenting.</param>
            <param name="parent">The transform parent on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>.</param>
            <param name="triggerOnSpawnedFromPool">Should the <see cref="M:GDX.Collections.Pooling.GameObjectPool.OnSpawnedFromPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)"/> be called when getting this item.</param>
            <returns>A <see cref="T:UnityEngine.GameObject" /> from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>, or null if no item is available.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.Get(GDX.Collections.Pooling.ListManagedPool,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Transform,System.Boolean)">
            <summary>
                Get the next available item from the <paramref name="pool"/>, and set its world position and look at position after parenting.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> created with <see cref="T:GDX.Collections.Pooling.GameObjectPool"/> to pull an item from.</param>
            <param name="worldPosition">The world position to set on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> after parenting.</param>
            <param name="worldLookAtPosition">The world position to have the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> look at after parenting.</param>
            <param name="parent">The transform parent on the item pulled from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>.</param>
            <param name="triggerOnSpawnedFromPool">Should the <see cref="M:GDX.Collections.Pooling.GameObjectPool.OnSpawnedFromPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)"/> be called when getting this item.</param>
            <returns>A <see cref="T:UnityEngine.GameObject" /> from the <see cref="T:GDX.Collections.Pooling.ListManagedPool"/>, or null if no item is available.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.GetOrCreatePool(UnityEngine.GameObject,UnityEngine.Transform,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Gets a pool for the <paramref name="gameObject"/>, or creates a new <see cref="T:GDX.Collections.Pooling.ListManagedPool" /> for it.
            </summary>
            <param name="gameObject">The object which going to be cloned.</param>
            <param name="parent">The container object.</param>
            <param name="minimumObjects">The minimum number of objects to be pooled.</param>
            <param name="maximumObjects">The maximum number of objects to be pooled.</param>
            <param name="allowCreateMore">Can more items be created as needed when starved for items?</param>
            <param name="allowReuseWhenCapped">Should we reuse oldest items when starving for items?</param>
            <param name="allowManagedTearDown">Does the pool allow a managed tear down event call?</param>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.CreateItem(GDX.Collections.Pooling.ListManagedPool)">
            <summary>
                Create a new item for the <paramref name="pool"/>.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> to create an item for, and assign too.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.OnDestroyItemAction(System.Object)">
            <summary>
                The subscribed action called when an item is requested to be destroyed..
            </summary>
            <param name="item">The item being destroyed.</param>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.OnReturnedToPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)">
            <summary>
                The subscribed action called when an item is returned to the <paramref name="pool"/>.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> which the <paramref name="item"/> is being returned to.</param>
            <param name="item">The item being returned to the <paramref name="pool"/>.</param>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.OnSpawnedFromPoolAction(GDX.Collections.Pooling.ListManagedPool,System.Object)">
            <summary>
                The subscribed action called when an item is spawned from the <paramref name="pool"/>.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> which has had the <paramref name="item"/> spawned from.</param>
            <param name="item">The spawned item.</param>
        </member>
        <member name="M:GDX.Collections.Pooling.GameObjectPool.OnTearDownAction(GDX.Collections.Pooling.ListManagedPool)">
            <summary>
                The subscribed action called when the <paramref name="pool"/> is asked to <see cref="M:GDX.Collections.Pooling.IManagedPool.TearDown"/> before items were returned to the pool.
            </summary>
            <param name="pool">The <see cref="T:GDX.Collections.Pooling.ListManagedPool"/> being torn down.</param>
        </member>
        <member name="T:GDX.Collections.Pooling.ManagedPoolBuilder">
            <summary>
                A time-slicing builder behaviour for <see cref="T:GDX.Collections.Pooling.IManagedPool" />.
            </summary>
            <remarks>A demonstration of usage can be found in <see cref="T:GDX.Collections.Pooling.GameObjectPool" />.</remarks>
        </member>
        <member name="F:GDX.Collections.Pooling.ManagedPoolBuilder.InstantiatesPerFrame">
            <summary>
                The number of instantiates to make per frame.
            </summary>
            <remarks>
                During defined loading periods this value could be increased for faster allocations,
                and then returned to a much more performant value afterwards.
            </remarks>
        </member>
        <member name="F:GDX.Collections.Pooling.ManagedPoolBuilder.DestroyBuilderOnFinish">
            <summary>
                Should the <see cref="T:GDX.Collections.Pooling.ManagedPoolBuilder" /> destroy itself when finished?
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ManagedPoolBuilder.s_builderObject">
            <summary>
                A cached reference to the <see cref="T:UnityEngine.GameObject" /> the builder created for itself.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ManagedPoolBuilder.s_targetPools">
            <summary>
                A <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:GDX.Collections.Pooling.IManagedPool" /> which are being built out.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ManagedPoolBuilder.s_targetPoolsCount">
            <summary>
                A cached numerical count of the number of <see cref="T:GDX.Collections.Pooling.IManagedPool" /> contained in <see cref="F:GDX.Collections.Pooling.ManagedPoolBuilder.s_targetPools" />.
            </summary>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPoolBuilder.LateUpdate">
            <summary>
                Unity's LateUpdate event
            </summary>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPoolBuilder.AddManagedPool(GDX.Collections.Pooling.IManagedPool)">
            <summary>
                Add an <see cref="T:GDX.Collections.Pooling.IManagedPool" /> to the builder to be built out.
            </summary>
            <param name="targetManagedPool">The <see cref="T:GDX.Collections.Pooling.IManagedPool" /> to build out.</param>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPoolBuilder.RemoveManagedPool(GDX.Collections.Pooling.IManagedPool)">
            <summary>
                Remove an <see cref="T:GDX.Collections.Pooling.IManagedPool" /> from the builder.
            </summary>
            <param name="targetManagedPool">The <see cref="T:GDX.Collections.Pooling.IManagedPool" /> to be removed.</param>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPoolBuilder.Tick">
            <summary>
                Extracted tick update for the builder; creating a limited number of items per tick.
            </summary>
        </member>
        <member name="T:GDX.Collections.Pooling.IGameObjectPoolItem">
            <summary>
                An interface describing the functionality needed for an item to be understood by <see cref="T:GDX.Collections.Pooling.GameObjectPool" />,
                if callbacks are to be made.
            </summary>
        </member>
        <member name="M:GDX.Collections.Pooling.IGameObjectPoolItem.GetParentPool">
            <summary>
                Return the <see cref="T:GDX.Collections.Pooling.IManagedPool" /> which the <see cref="T:GDX.Collections.Pooling.IGameObjectPoolItem" /> is currently managed by.
            </summary>
            <remarks>It is possible that a pooled item may exist without a parent in some custom scenario.</remarks>
            <returns>
                An <see cref="T:GDX.Collections.Pooling.IManagedPool" /> if the <see cref="T:GDX.Collections.Pooling.IGameObjectPoolItem" /> is attached to a pool, otherwise
                null.
            </returns>
        </member>
        <member name="M:GDX.Collections.Pooling.IGameObjectPoolItem.IsValidItem">
            <summary>
                Is the <see cref="T:GDX.Collections.Pooling.IGameObjectPoolItem" /> thought to be valid?
            </summary>
            <remarks>
                Sometimes a <see cref="T:UnityEngine.GameObject" /> may get destroyed without the pool knowing, this contains
                checks to validate if the item can be returned to a pool and reused appropriately.
            </remarks>
            <returns>true/false if the item is found to be valid.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.IGameObjectPoolItem.OnReturnedToPool">
            <summary>
                Called when this item is returned to the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.
            </summary>
            <remarks>
                This should handle everything, including disabling the <see cref="T:UnityEngine.GameObject" />.
            </remarks>
        </member>
        <member name="M:GDX.Collections.Pooling.IGameObjectPoolItem.OnSpawnedFromPool">
            <summary>
                Called when this item is spawned from the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.
            </summary>
            <remarks>
                This should handle everything, including enabling the <see cref="T:UnityEngine.GameObject" />.
            </remarks>
        </member>
        <member name="M:GDX.Collections.Pooling.IGameObjectPoolItem.ReturnToPool">
            <summary>
                Return the item to the <see cref="T:GDX.Collections.Pooling.IManagedPool" /> which it is associated too.
            </summary>
        </member>
        <member name="M:GDX.Collections.Pooling.IGameObjectPoolItem.SetParentPool(GDX.Collections.Pooling.IManagedPool)">
            <summary>
                Set the <see cref="T:GDX.Collections.Pooling.IManagedPool" /> which this item believes it belongs too.
            </summary>
            <remarks>This is used during creation to assign the parent that is creating the item.</remarks>
            <param name="targetManagedPool">The parent <see cref="T:GDX.Collections.Pooling.IManagedPool" />.</param>
        </member>
        <member name="T:GDX.Collections.Pooling.ManagedPools">
            <summary>
                A managed pooling system implementation primarily meant for the object oriented patterns, based on the C# base
                object.
            </summary>
        </member>
        <member name="F:GDX.Collections.Pooling.ManagedPools.s_lastPoolKey">
            <summary>
                The last issued pool key used by internal dictionary's <see cref="T:System.Collections.Generic.KeyValuePair`2" /> when referencing an
                <see cref="T:GDX.Collections.Pooling.IManagedPool" />.
            </summary>
            <remarks>
                This value resets on domain reload, and as such the keys should not be relied on through any sort of
                serialization (including networking) or session based process.
            </remarks>
        </member>
        <member name="F:GDX.Collections.Pooling.ManagedPools.s_pools">
            <summary>
                An internal dictionary containing the <see cref="T:GDX.Collections.Pooling.IManagedPool" />s, uniquely indexed by constant ticket-like
                system.
            </summary>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.GetNextPoolKey">
            <summary>
                Get the next available pool key.
            </summary>
            <remarks>Increments the previously issued stored value, and returns the new value.</remarks>
            <returns>A unique pool identifying key.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.GetPool(System.UInt32)">
            <summary>
                Get a registered <see cref="T:GDX.Collections.Pooling.IManagedPool" /> based on its <paramref name="key" />.
            </summary>
            <param name="key">The unique key to use when looking for the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.</param>
            <returns>An <see cref="T:GDX.Collections.Pooling.IManagedPool" /> identified by the provided <paramref name="key" />.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.GetPool``1(System.UInt32)">
            <summary>
                Get a registered <see cref="T:GDX.Collections.Pooling.IManagedPool" /> based on its <paramref name="key" />.
            </summary>
            <param name="key">The unique key to use when looking for the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.</param>
            <typeparam name="T">The type of the pool, used to cast the return pool</typeparam>
            <returns>A type casted pool identified by the provided <paramref name="key" />.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.GetPoolWithContainsCheck(System.UInt32)">
            <summary>
                Get a registered <see cref="T:GDX.Collections.Pooling.IManagedPool" /> based on its <paramref name="key" />, first checking if it is
                registered.
            </summary>
            <param name="key">The unique key to use when looking for the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.</param>
            <returns>An <see cref="T:GDX.Collections.Pooling.IManagedPool" /> identified by the provided <paramref name="key" />, null if not found.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.GetPoolWithContainsCheck``1(System.UInt32)">
            <summary>
                Get a registered <see cref="T:GDX.Collections.Pooling.IManagedPool" /> based on its <paramref name="key" />, first checking if it is
                registered.
            </summary>
            <param name="key">The unique key to use when looking for the <see cref="T:GDX.Collections.Pooling.IManagedPool" />.</param>
            <typeparam name="T">The type of the pool, used to cast the return pool</typeparam>
            <returns>A type casted pool identified by the provided <paramref name="key" />, null if not found.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.HasPool(System.UInt32)">
            <summary>
                Is an <see cref="T:GDX.Collections.Pooling.IManagedPool" /> registered with the provided <paramref name="key" />?
            </summary>
            <param name="key">A unique pool key</param>
            <returns>true if a pool is found registered with this system, false otherwise.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.ReturnAll(System.Boolean)">
            <summary>
                Attempts to return all spawned items to their original <see cref="T:GDX.Collections.Pooling.IManagedPool" />s.
            </summary>
            <param name="shouldShrink">Should the pool be shrunk (destroying created items) to its original set minimum size?</param>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.Register(GDX.Collections.Pooling.IManagedPool)">
            <summary>
                Register a <see cref="T:GDX.Collections.Pooling.IManagedPool" /> with the global management system.
            </summary>
            <param name="managedPool">Target <see cref="T:GDX.Collections.Pooling.IManagedPool" /></param>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.TearDown(System.Boolean)">
            <summary>
                Execute <see cref="M:GDX.Collections.Pooling.IManagedPool.TearDown" /> (destroying contents) on all registered <see cref="T:GDX.Collections.Pooling.IManagedPool" />
                which have been flagged to accept it, evaluated by <see cref="M:GDX.Collections.Pooling.IManagedPool.IsAllowedManagedTearDown" />.
            </summary>
            <remarks>
                This will unregister the <see cref="T:GDX.Collections.Pooling.IManagedPool" /> itself as well.
            </remarks>
            <param name="forceAll">
                Execute <see cref="M:GDX.Collections.Pooling.IManagedPool.TearDown" /> regardless of the
                <see cref="M:GDX.Collections.Pooling.IManagedPool.IsAllowedManagedTearDown" /> response.
            </param>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.TryGetFirstPool(System.Object,GDX.Collections.Pooling.IManagedPool@)">
            <summary>
                Attempt to get an <see cref="T:GDX.Collections.Pooling.IManagedPool" /> based on the <paramref name="baseObject" />.
            </summary>
            <param name="baseObject">The <see cref="T:System.Object" /> which was used to create the pool.</param>
            <param name="pool">The first found <see cref="T:GDX.Collections.Pooling.IManagedPool" /> created with <paramref name="baseObject" />.</param>
            <returns>true/false if an <see cref="T:GDX.Collections.Pooling.IManagedPool" /> was found.</returns>
        </member>
        <member name="M:GDX.Collections.Pooling.ManagedPools.Unregister(GDX.Collections.Pooling.IManagedPool)">
            <summary>
                Unregister a <see cref="T:GDX.Collections.Pooling.IManagedPool" /> from with the management system.
            </summary>
            <param name="managedPool">Target <see cref="T:GDX.Collections.Pooling.IManagedPool" /></param>
        </member>
        <member name="T:GDX.Collections.BitArray64">
            <summary>
                A 64-bit array.
            </summary>
            <example>
                Useful for packing a bunch of data with known indices tightly.
                <code>
                    if(myBitArray64[1])
                    {
                        BeAwesome();
                    }
                </code>
            </example>
        </member>
        <member name="F:GDX.Collections.BitArray64.Bits0">
            <summary>
                First reserved <see cref="T:System.Int64" /> memory block (64-bits).
            </summary>
            <remarks>Indices 0-63</remarks>
        </member>
        <member name="M:GDX.Collections.BitArray64.#ctor(System.Int64)">
            <summary>
                Create a new <see cref="T:GDX.Collections.BitArray64" /> based on provided <paramref name="bits0" />.
            </summary>
            <param name="bits0">An existing value to be used to create the backing data for a <see cref="T:GDX.Collections.BitArray64" /></param>
        </member>
        <member name="P:GDX.Collections.BitArray64.Item(System.Byte)">
            <summary>
                Access bit in array.
            </summary>
            <param name="index">Target bit index.</param>
        </member>
        <member name="T:GDX.Collections.NativeSparseSet">
            <summary>
                An adapter collection for external data arrays that allows constant-time insertion, deletion, and lookup by
                handle, as well as array-like iteration.
            </summary>
            <remarks>
                The <see cref="T:GDX.Collections.NativeSparseSet" /> is backed by a <see cref="T:Unity.Collections.NativeArray`1" /> which
                requires UnityEngine.CoreModule.dll.
            </remarks>
        </member>
        <member name="F:GDX.Collections.NativeSparseSet.DenseArray">
            <summary>
                Holds references to the sparse array for swapping indices.
            </summary>
        </member>
        <member name="F:GDX.Collections.NativeSparseSet.SparseArray">
            <summary>
                Holds references to dense array indices.
            </summary>
            <remarks>
                Its own indices are claimed and freed via a free-list.
            </remarks>
        </member>
        <member name="F:GDX.Collections.NativeSparseSet.Count">
            <summary>
                How many indices are being used currently?
            </summary>
        </member>
        <member name="F:GDX.Collections.NativeSparseSet.FreeIndex">
            <summary>
                The first free (currently unused) index in the sparse array.
            </summary>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.#ctor(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Create a <see cref="T:GDX.Collections.NativeSparseSet" /> with an <paramref name="initialCapacity" />.
            </summary>
            <param name="initialCapacity">The initial capacity of the sparse and dense int arrays.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.AddWithExpandCheck(System.Int32,System.Int32@,System.Int32@,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <param name="expandBy">How many indices to expand by.</param>
            <param name="sparseIndex">The sparse index allocated.</param>
            <param name="denseIndex">The dense index allocated.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.AddUnchecked(System.Int32@,System.Int32@)">
            <summary>
                Adds a sparse/dense index pair to the set without checking if the set needs to expand.
            </summary>
            <param name="sparseIndex">The sparse index allocated.</param>
            <param name="denseIndex">The dense index allocated.</param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.GetDenseIndexUnchecked(System.Int32)">
            <summary>
                Gets the value of the sparse array at the given index without any data validation.
            </summary>
            <param name="sparseIndex">The index to check in the sparse array.</param>
            <returns>The dense index at the given sparse index.</returns>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.GetDenseIndexWithBoundsCheck(System.Int32)">
            <summary>
                Gets the value of the sparse array at the given index,
                or -1 if the dense and sparse indices don't point to each other or if the dense index is outside the dense bounds.
            </summary>
            <param name="sparseIndex">The index in the sparse array to check against.</param>
            <returns>The dense index pointed to by the current sparse index, or -1 if invalid.</returns>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.GetDenseIndexWithVersionCheck(System.Int32,System.UInt64,Unity.Collections.NativeArray{System.UInt64})">
            <summary>
                Gets the value of the sparse array at the given index,
                or -1 if the version number does not match.
            </summary>
            <param name="sparseIndex">The index in the sparse array to check against.</param>
            <param name="version">The version number associated with the sparse index.</param>
            <param name="versionArray">The array containing the version number to check against.</param>
            <returns>The dense index pointed to by the current sparse index, or -1 if invalid.</returns>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.GetDenseIndexWithBoundsAndVersionCheck(System.Int32,System.UInt64,Unity.Collections.NativeArray{System.UInt64})">
            <summary>
                Gets the value of the sparse array at the given index,
                or -1 if the given sparse index is invalid..
            </summary>
            <param name="sparseIndex">The index in the sparse array to check against.</param>
            <param name="version">The version number associated with the sparse index.</param>
            <param name="versionArray">The array containing the version number to check against.</param>
            <returns>The dense index pointed to by the current sparse index, or -1 if invalid.</returns>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveWithNullValueCheck(System.Int32@)">
            <summary>
                Returns true if the element was successfully removed.
                WARNING: Will not protect against accidentally removing twice if the index in question was recycled between Remove
                calls.
            </summary>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveWithBoundsAndVersionChecks(System.Int32@,System.UInt64,Unity.Collections.NativeArray{System.UInt64})">
            <summary>
                Removes the associated sparse/dense index pair from active use.
                calls.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="version">
                The version number of the int used to access the sparse index. Used to guard against accessing
                indices that have been removed and reused.
            </param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <returns>True if the element was successfully removed.</returns>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveUnchecked(System.Int32)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveUnchecked(System.Int32,Unity.Collections.NativeArray{System.UInt64})">
            <summary>
                Removes the associated sparse/dense index pair from active use and increments the version.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveUnchecked(System.Int32,System.Int32@,System.Int32@)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
                Out parameters used to manage parallel data arrays.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="indexToSwapTo">Replace the data array value at this index with the data array value at indexToSwapFrom.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at indexToSwapTo.
            </param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveUnchecked(System.Int32,Unity.Collections.NativeArray{System.UInt64},System.Int32@,System.Int32@)">
            <summary>
                Removes the associated sparse/dense index pair from active use and increments the version.
                Out parameters used to manage parallel data arrays.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <param name="indexToSwapTo">Replace the data array value at this index with the data array value at indexToSwapFrom.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at indexToSwapTo.
            </param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveUncheckedFromDenseIndex(System.Int32)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
            </summary>
            <param name="denseIndexToRemove">The dense index associated with the sparse index to remove.</param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveUncheckedFromDenseIndex(System.Int32,System.UInt64[])">
            <summary>
                Removes the associated sparse/dense index pair from active use.
            </summary>
            <param name="denseIndexToRemove">The dense index associated with the sparse index to remove.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveUncheckedFromDenseIndex(System.Int32,System.Int32@)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
                Out parameter used to manage parallel data arrays.
            </summary>
            <param name="denseIndexToRemove">The sparse index to remove.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at denseIndexToRemove.
            </param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.RemoveUncheckedFromDenseIndex(System.Int32,Unity.Collections.NativeArray{System.UInt64},System.Int32@)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
                Out parameter used to manage parallel data arrays.
            </summary>
            <param name="denseIndexToRemove">The sparse index to remove.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at denseIndexToRemove.
            </param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.TryRemoveWithVersionCheck(System.Int32,System.UInt64,Unity.Collections.NativeArray{System.UInt64},System.Int32@,System.Int32@)">
            <summary>
                Attempts to remove the associated sparse/dense index pair from active use and increments the version if successful.
                Out parameters used to manage parallel data arrays.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="version">
                The version number of the int used to access the sparse index. Used to guard against accessing
                indices that have been removed and reused.
            </param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <param name="indexToSwapTo">Replace the data array value at this index with the data array value at indexToSwapFrom.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at indexToSwapTo.
            </param>
            <returns>Whether or not the remove attempt succeeded.</returns>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.TryRemoveFromDenseIndexWithVersionCheck(System.Int32,System.UInt64,Unity.Collections.NativeArray{System.UInt64})">
            <summary>
                Attempts to remove the associated sparse/dense index pair from active use and increments the version if successful.
            </summary>
            <param name="denseIndexToRemove">The dense index associated with the sparse index to remove.</param>
            <param name="version">The array where version numbers to check against are stored.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <returns>Whether or not the remove attempt succeeded.</returns>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.Clear">
            <summary>
                Clear the dense and sparse arrays.
            </summary>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.Clear(Unity.Collections.NativeArray{System.UInt64})">
            <summary>
                Clear the dense and sparse arrays.
            </summary>
            <param name="versionArray">Array containing version numbers to check against.</param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.Expand(System.Int32,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Reallocate the dense and sparse arrays with additional capacity.
            </summary>
            <param name="extraCapacity">How many indices to expand the dense and sparse arrays by.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="M:GDX.Collections.NativeSparseSet.Expand(System.Int32,Unity.Collections.NativeArray{System.UInt64}@,Unity.Collections.Allocator,Unity.Collections.NativeArrayOptions)">
            <summary>
                Reallocate the dense and sparse arrays with additional capacity.
            </summary>
            <param name="extraCapacity">How many indices to expand the dense and sparse arrays by.</param>
            <param name="versionArray">Array containing version numbers to check against.</param>
            <param name="allocator">The <see cref="T:Unity.Collections.Allocator" /> type to use.</param>
            <param name="nativeArrayOptions">Should the memory be cleared on allocation?</param>
        </member>
        <member name="T:GDX.Collections.BitArray128">
            <summary>
                A 128-bit array.
            </summary>
            <example>
                Useful for packing a bunch of data with known indices tightly.
                <code>
                    if(myBitArray128[1])
                    {
                        BeAwesome();
                    }
                </code>
            </example>
        </member>
        <member name="F:GDX.Collections.BitArray128.Bits0">
            <summary>
                First reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 0-31</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray128.Bits1">
            <summary>
                Second reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 32-63</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray128.Bits2">
            <summary>
                Third reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 64-95</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray128.Bits3">
            <summary>
                Fourth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 96-127</remarks>
        </member>
        <member name="P:GDX.Collections.BitArray128.Item(System.Int32)">
            <summary>
                Access bit in array.
            </summary>
            <param name="index">Target bit index.</param>
        </member>
        <member name="T:GDX.Collections.BitArray32">
            <summary>
                A 32-bit array.
            </summary>
            <example>
                Useful for packing a bunch of data with known indices tightly.
                <code>
                    if(myBitArray32[1])
                    {
                        BeAwesome();
                    }
                </code>
            </example>
        </member>
        <member name="F:GDX.Collections.BitArray32.Bits0">
            <summary>
                First reserved <see cref="T:System.UInt32" /> memory block (32-bits).
            </summary>
            <remarks>Indices 0-31</remarks>
        </member>
        <member name="M:GDX.Collections.BitArray32.#ctor(System.UInt32)">
            <summary>
                Create a new <see cref="T:GDX.Collections.BitArray32" /> based on provided <paramref name="bits0" />.
            </summary>
            <param name="bits0">An existing value to be used to create the backing data for a <see cref="T:GDX.Collections.BitArray32" /></param>
        </member>
        <member name="P:GDX.Collections.BitArray32.Item(System.Byte)">
            <summary>
                Access bit in array.
            </summary>
            <param name="index">Target bit index.</param>
        </member>
        <member name="T:GDX.Collections.SparseSet">
            <summary>
                An adapter collection for external data arrays that allows constant-time insertion, deletion, and lookup by
                handle, as well as array-like iteration.
            </summary>
        </member>
        <member name="F:GDX.Collections.SparseSet.DenseArray">
            <summary>
                Holds references to the sparse array for swapping indices.
            </summary>
        </member>
        <member name="F:GDX.Collections.SparseSet.SparseArray">
            <summary>
                Holds references to dense array indices.
            </summary>
            <remarks>
                Its own indices are claimed and freed via a free-list.
            </remarks>
        </member>
        <member name="F:GDX.Collections.SparseSet.Count">
            <summary>
                How many indices are being used currently?
            </summary>
        </member>
        <member name="F:GDX.Collections.SparseSet.FreeIndex">
            <summary>
                The first free (currently unused) index in the sparse array.
            </summary>
        </member>
        <member name="M:GDX.Collections.SparseSet.#ctor(System.Int32)">
            <summary>
                Create a <see cref="T:GDX.Collections.SparseSet" /> with an <paramref name="initialCapacity" />.
            </summary>
            <param name="initialCapacity">The initial capacity of the sparse and dense int arrays.</param>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddWithExpandCheck(System.Int32,System.Int32@,System.Int32@)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <param name="expandBy">How many indices to expand by.</param>
            <param name="sparseIndex">The sparse index allocated.</param>
            <param name="denseIndex">The dense index allocated.</param>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddUnchecked(System.Int32@,System.Int32@)">
            <summary>
                Adds a sparse/dense index pair to the set without checking if the set needs to expand.
            </summary>
            <param name="sparseIndex">The sparse index allocated.</param>
            <param name="denseIndex">The dense index allocated.</param>
        </member>
        <member name="M:GDX.Collections.SparseSet.GetDenseIndexUnchecked(System.Int32)">
            <summary>
                Gets the value of the sparse array at the given index without any data validation.
            </summary>
            <param name="sparseIndex">The index to check in the sparse array.</param>
            <returns>The dense index at the given sparse index.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.GetDenseIndexWithBoundsCheck(System.Int32)">
            <summary>
                Gets the value of the sparse array at the given index,
                or -1 if the dense and sparse indices don't point to each other or if the dense index is outside the dense bounds.
            </summary>
            <param name="sparseIndex">The index in the sparse array to check against.</param>
            <returns>The dense index pointed to by the current sparse index, or -1 if invalid.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.GetDenseIndexWithVersionCheck(System.Int32,System.UInt64,System.UInt64[])">
            <summary>
                Gets the value of the sparse array at the given index,
                or -1 if the version number does not match.
            </summary>
            <param name="sparseIndex">The index in the sparse array to check against.</param>
            <param name="version">The version number associated with the sparse index.</param>
            <param name="versionArray">The array containing the version number to check against.</param>
            <returns>The dense index pointed to by the current sparse index, or -1 if invalid.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.GetDenseIndexWithBoundsAndVersionCheck(System.Int32,System.UInt64,System.UInt64[])">
            <summary>
                Gets the value of the sparse array at the given index,
                or -1 if the given sparse index is invalid..
            </summary>
            <param name="sparseIndex">The index in the sparse array to check against.</param>
            <param name="version">The version number associated with the sparse index.</param>
            <param name="versionArray">The array containing the version number to check against.</param>
            <returns>The dense index pointed to by the current sparse index, or -1 if invalid.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveWithNullValueCheck(System.Int32@)">
            <summary>
                Returns true if the element was successfully removed.
                WARNING: Will not protect against accidentally removing twice if the index in question was recycled between Remove
                calls.
            </summary>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveWithBoundsAndVersionChecks(System.Int32@,System.UInt64,System.UInt64[]@)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
                calls.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="version">
                The version number of the int used to access the sparse index. Used to guard against accessing
                indices that have been removed and reused.
            </param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <returns>True if the element was successfully removed.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveUnchecked(System.Int32)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveUnchecked(System.Int32,System.UInt64[])">
            <summary>
                Removes the associated sparse/dense index pair from active use and increments the version.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveUnchecked(System.Int32,System.Int32@,System.Int32@)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
                Out parameters used to manage parallel data arrays.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="indexToSwapTo">Replace the data array value at this index with the data array value at indexToSwapFrom.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at indexToSwapTo.
            </param>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveUnchecked(System.Int32,System.UInt64[],System.Int32@,System.Int32@)">
            <summary>
                Removes the associated sparse/dense index pair from active use and increments the version.
                Out parameters used to manage parallel data arrays.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <param name="indexToSwapTo">Replace the data array value at this index with the data array value at indexToSwapFrom.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at indexToSwapTo.
            </param>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveUncheckedFromDenseIndex(System.Int32)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
            </summary>
            <param name="denseIndexToRemove">The dense index associated with the sparse index to remove.</param>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveUncheckedFromDenseIndex(System.Int32,System.UInt64[])">
            <summary>
                Removes the associated sparse/dense index pair from active use.
            </summary>
            <param name="denseIndexToRemove">The dense index associated with the sparse index to remove.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveUncheckedFromDenseIndex(System.Int32,System.Int32@)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
                Out parameter used to manage parallel data arrays.
            </summary>
            <param name="denseIndexToRemove">The sparse index to remove.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at denseIndexToRemove.
            </param>
        </member>
        <member name="M:GDX.Collections.SparseSet.RemoveUncheckedFromDenseIndex(System.Int32,System.UInt64[],System.Int32@)">
            <summary>
                Removes the associated sparse/dense index pair from active use.
                Out parameter used to manage parallel data arrays.
            </summary>
            <param name="denseIndexToRemove">The sparse index to remove.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at denseIndexToRemove.
            </param>
        </member>
        <member name="M:GDX.Collections.SparseSet.TryRemoveWithVersionCheck(System.Int32,System.UInt64,System.UInt64[],System.Int32@,System.Int32@)">
            <summary>
                Attempts to remove the associated sparse/dense index pair from active use and increments the version if successful.
                Out parameters used to manage parallel data arrays.
            </summary>
            <param name="sparseIndexToRemove">The sparse index to remove.</param>
            <param name="version">
                The version number of the int used to access the sparse index. Used to guard against accessing
                indices that have been removed and reused.
            </param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <param name="indexToSwapTo">Replace the data array value at this index with the data array value at indexToSwapFrom.</param>
            <param name="indexToSwapFrom">
                Set the data array value at this index to default after swapping with the data array
                value at indexToSwapTo.
            </param>
            <returns>Whether or not the remove attempt succeeded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.TryRemoveFromDenseIndexWithVersionCheck(System.Int32,System.UInt64,System.UInt64[])">
            <summary>
                Attempts to remove the associated sparse/dense index pair from active use and increments the version if successful.
            </summary>
            <param name="denseIndexToRemove">The dense index associated with the sparse index to remove.</param>
            <param name="version">The array where version numbers to check against are stored.</param>
            <param name="versionArray">The array where version numbers to check against are stored.</param>
            <returns>Whether or not the remove attempt succeeded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.Clear">
            <summary>
                Clear the dense and sparse arrays.
            </summary>
        </member>
        <member name="M:GDX.Collections.SparseSet.Clear(System.UInt64[])">
            <summary>
                Clear the dense and sparse arrays.
            </summary>
            ///
            <param name="versionArray">Array containing version numbers to check against.</param>
        </member>
        <member name="M:GDX.Collections.SparseSet.Expand(System.Int32)">
            <summary>
                Reallocate the dense and sparse arrays with additional capacity.
            </summary>
            <param name="extraCapacity">How many indices to expand the dense and sparse arrays by.</param>
        </member>
        <member name="M:GDX.Collections.SparseSet.Expand(System.Int32,System.UInt64[]@)">
            <summary>
                Reallocate the dense and sparse arrays with additional capacity.
            </summary>
            <param name="extraCapacity">How many indices to expand the dense and sparse arrays by.</param>
            <param name="versionArray">Array containing version numbers to check against.</param>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddWithExpandCheck``1(``0,``0[]@,System.Int32@,System.Int32)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddWithExpandCheck``2(``0,``0[]@,``1,``1[]@,System.Int32@,System.Int32)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddWithExpandCheck``3(``0,``0[]@,``1,``1[]@,``2,``2[]@,System.Int32@,System.Int32)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddWithExpandCheck``4(``0,``0[]@,``1,``1[]@,``2,``2[]@,``3,``3[]@,System.Int32@,System.Int32)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddWithExpandCheck``5(``0,``0[]@,``1,``1[]@,``2,``2[]@,``3,``3[]@,``4,``4[]@,System.Int32@,System.Int32)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddWithExpandCheck``6(``0,``0[]@,``1,``1[]@,``2,``2[]@,``3,``3[]@,``4,``4[]@,``5,``5[]@,System.Int32@,System.Int32)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddWithExpandCheck``7(``0,``0[]@,``1,``1[]@,``2,``2[]@,``3,``3[]@,``4,``4[]@,``5,``5[]@,``6,``6[]@,System.Int32@,System.Int32)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddWithExpandCheck``8(``0,``0[]@,``1,``1[]@,``2,``2[]@,``3,``3[]@,``4,``4[]@,``5,``5[]@,``6,``6[]@,``7,``7[]@,System.Int32@,System.Int32)">
            <summary>
                Adds a sparse/dense index pair to the set and expands the arrays if necessary.
            </summary>
            <returns>True if the index pool expanded.</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddUnchecked``1(``0,``0[])">
            <summary>
                Adds to the set without checking if the set needs to expand.
            </summary>
            <returns>The sparse index allocated</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddUnchecked``2(``0,``0[],``1,``1[])">
            <summary>
                Adds to the set without checking if the set needs to expand.
            </summary>
            <returns>The sparse index allocated</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddUnchecked``3(``0,``0[],``1,``1[],``2,``2[])">
            <summary>
                Adds to the set without checking if the set needs to expand.
            </summary>
            <returns>The sparse index allocated</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddUnchecked``4(``0,``0[],``1,``1[],``2,``2[],``3,``3[])">
            <summary>
                Adds to the set without checking if the set needs to expand.
            </summary>
            <returns>The sparse index allocated</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddUnchecked``5(``0,``0[],``1,``1[],``2,``2[],``3,``3[],``4,``4[])">
            <summary>
                Adds to the set without checking if the set needs to expand.
            </summary>
            <returns>The sparse index allocated</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddUnchecked``6(``0,``0[],``1,``1[],``2,``2[],``3,``3[],``4,``4[],``5,``5[])">
            <summary>
                Adds to the set without checking if the set needs to expand.
            </summary>
            <returns>The sparse index allocated</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddUnchecked``7(``0,``0[],``1,``1[],``2,``2[],``3,``3[],``4,``4[],``5,``5[],``6,``6[])">
            <summary>
                Adds to the set without checking if the set needs to expand.
            </summary>
            <returns>The sparse index allocated</returns>
        </member>
        <member name="M:GDX.Collections.SparseSet.AddUnchecked``8(``0,``0[],``1,``1[],``2,``2[],``3,``3[],``4,``4[],``5,``5[],``6,``6[],``7,``7[])">
            <summary>
                Adds to the set without checking if the set needs to expand.
            </summary>
            <returns>The sparse index allocated</returns>
        </member>
        <member name="T:GDX.Collections.BitArray512">
            <summary>
                A 512-bit array.
            </summary>
            <example>
                Useful for packing a bunch of data with known indices tightly.
                <code>
                    if(myBitArray512[1])
                    {
                        BeAwesome();
                    }
                </code>
            </example>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits0">
            <summary>
                First reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 0-31</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits1">
            <summary>
                Second reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 32-63</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits2">
            <summary>
                Third reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 64-95</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits3">
            <summary>
                Fourth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 96-127</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits4">
            <summary>
                Fifth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 128-159</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits5">
            <summary>
                Sixth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 160-191</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits6">
            <summary>
                Seventh reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 192-223</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits7">
            <summary>
                Eighth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 224-255</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits8">
            <summary>
                Ninth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 256-287</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits9">
            <summary>
                Tenth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 288-319</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits10">
            <summary>
                Eleventh reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 320-351</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits11">
            <summary>
                Twelfth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 352-383</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits12">
            <summary>
                Thirteenth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 384-415</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits13">
            <summary>
                Fourteenth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 416-447</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits14">
            <summary>
                Fifteenth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 448-479</remarks>
        </member>
        <member name="F:GDX.Collections.BitArray512.Bits15">
            <summary>
                Sixteenth reserved <see cref="T:System.Int32" /> memory block.
            </summary>
            <remarks>Indices 480-511</remarks>
        </member>
        <member name="P:GDX.Collections.BitArray512.Item(System.Int32)">
            <summary>
                Access bit in array.
            </summary>
            <param name="index">Target bit index.</param>
        </member>
        <member name="T:GDX.Collections.FreeList">
            <summary>
                An array where indices are allocated from and stored in an in-place linked list.
                Allocating or deallocating a single int from this array is very fast, as is single datum lookup,
                but neither the allocated indices nor the free indices can be reliably iterated without an external data structure.
                This structure can be adapted to an arbitrary of external, parallel arrays.
            </summary>
        </member>
        <member name="F:GDX.Collections.FreeList.Indices">
            <summary>
                Data storage for allocated indices as well as the in-place free-list.
            </summary>
        </member>
        <member name="F:GDX.Collections.FreeList.CurrentFreeIndex">
            <summary>
                The next available index of the free-list.
            </summary>
        </member>
        <member name="F:GDX.Collections.FreeList.Count">
            <summary>
                The total number of currently-allocated indices.
            </summary>
        </member>
        <member name="M:GDX.Collections.FreeList.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="initialCapacity">The initial capacity of the array.</param>
        </member>
        <member name="M:GDX.Collections.FreeList.Clear">
            <summary>
                Removes all allocated data and rebuilds the free-list.
            </summary>
        </member>
        <member name="M:GDX.Collections.FreeList.AddWithExpandCheck(System.Int32,System.Int32@,System.Int32)">
            <summary>
                Allocates an index from the free-list and stores an integer there, expanding the array if necessary.
            </summary>
            <param name="data">The integer value to store at the allocated index.</param>
            <param name="allocatedIndex">The index allocated from the free-list.</param>
            <param name="expandBy">How much the array should expand by when out of space.</param>
            <returns>True if the array expanded.</returns>
        </member>
        <member name="M:GDX.Collections.FreeList.AddWithExpandCheck(System.Int32,System.Int32@)">
            <summary>
                Allocates an index from the free-list and stores an integer there, expanding the array by twice the current size if
                necessary.
            </summary>
            <param name="data">The integer value to store at the allocated index.</param>
            <param name="allocatedIndex">The index allocated from the free-list.</param>
            <returns>True if the array expanded.</returns>
        </member>
        <member name="M:GDX.Collections.FreeList.AddUnchecked(System.Int32)">
            <summary>
                Allocates an index from the free-list and stores an integer there, without checking for expansion.
            </summary>
            <param name="data">The integer value to store at the allocated index.</param>
            <returns>The index allocated from the free-list.</returns>
        </member>
        <member name="M:GDX.Collections.FreeList.RemoveAt(System.Int32)">
            <summary>
                Deallocates the given index and adds it to the free-list.
            </summary>
            <param name="index">The index to add to the free-list.</param>
        </member>
        <member name="M:GDX.Collections.FreeList.GetAndRemoveAt(System.Int32)">
            <summary>
                Retrieves the value stored at the given index and deallocates the index, adding it to the free-list.
            </summary>
            <param name="index">The index to add to the free-list.</param>
            <returns>The value stored at the given index.</returns>
        </member>
        <member name="T:GDX.Mathematics.Smooth">
            <summary>
                Some helpful interpolation functionality.
            </summary>
        </member>
        <member name="M:GDX.Mathematics.Smooth.Exponential(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Smooths between <paramref name="previousValue"/> and <paramref name="targetValue"/> based on time since the last sample and a given half-life.
            </summary>
            <remarks>Assumes wibbly wobbly, timey wimey.</remarks>
            <param name="previousValue">Ideally, the previous output value.</param>
            <param name="targetValue">The target value.</param>
            <param name="halfLife">
                Half of the time it would take to go from <paramref name="previousValue" /> to
                <paramref name="targetValue" /> if time were constant.
            </param>
            <param name="elapsedTime">
                The amount of time that has transpired since the <paramref name="previousValue" /> was
                generated.
            </param>
            <returns>A smoothed value.</returns>
        </member>
        <member name="M:GDX.Mathematics.Smooth.HalfLifeToSmoothingFactor(System.Single,System.Single)">
            <summary>
                Takes a <paramref name="halfLife" /> value, and outputs a factor based on <paramref name="elapsedTime" />.
            </summary>
            <remarks>Not providing a value for <paramref name="elapsedTime" /> will result in using <c>Time.deltaTime</c>.</remarks>
            <param name="halfLife">The desired halflife.</param>
            <param name="elapsedTime">The time since the last sample.</param>
            <returns>The coefficient value applied to the weight(t) of a lerp.</returns>
        </member>
        <member name="T:GDX.Mathematics.Random.MersenneTwister">
            <summary>
                Generates pseudo-random value using the Mersenne Twister algorithm.
            </summary>
            <remarks>
                <para>
                    Adapted from the work of Akihilo Kramot (Takel), originally based on a
                    <a href="http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/MT2002/CODES/mt19937ar.c">
                        C-program for MT19937
                    </a>
                    by Takuji Nishimura, considering the suggestions by Topher Cooper and Marc Rieffel in July-Aug. 1997.
                    See the
                    <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">
                        Mersenne Twister Homepage
                    </a>
                    for details on the algorithm.
                </para>
            </remarks>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister.N">
            <summary>
                The degree of recurrence.
            </summary>
            <remarks>
                Size of byte pool.
            </remarks>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister.M">
            <summary>
                The middle word value.
            </summary>
            <remarks>
                Period second parameter.
            </remarks>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister.UpperMask">
            <summary>
                The most significant w-r bits.
            </summary>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister.LowerMask">
            <summary>
                Least significant r bits.
            </summary>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister.FiftyThreeBitsOf1S">
            <summary>
                A magic inducing value.
            </summary>
            <remarks>
                A value of 9007199254740991.0 is the maximum <see cref="T:System.Double" /> value which the 53
                significant can hold when the exponent is 0.
            </remarks>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister.Inverse53BitsOf1S">
            <summary>
                Inverse of <see cref="F:GDX.Mathematics.Random.MersenneTwister.FiftyThreeBitsOf1S" />.
            </summary>
            <remarks>
                Multiply by inverse to (vainly?) try to avoid a division.
            </remarks>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister.OnePlus53BitsOf1S">
            <summary>
                1 plus <see cref="F:GDX.Mathematics.Random.MersenneTwister.FiftyThreeBitsOf1S" />.
            </summary>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister.InverseOnePlus53BitsOf1S">
            <summary>
                Inverse of <see cref="F:GDX.Mathematics.Random.MersenneTwister.OnePlus53BitsOf1S" />.
            </summary>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister.s_mag01">
            <summary>
                Magnitude lookup.
            </summary>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister._mersenneTwisterState">
            <summary>
                The array for the state vector of the twister.
            </summary>
            <remarks>Also known as it's byte pool.</remarks>
        </member>
        <member name="F:GDX.Mathematics.Random.MersenneTwister._mersenneTwisterIndex">
            <summary>
                The current index in the array for the state of the twister.
            </summary>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.#ctor(System.Int32)">
            <summary>
                Creates a new pseudo-random number generator with the given <paramref name="seed" />.
            </summary>
            <param name="seed">A <see cref="T:System.Int32" /> value to use as a seed.</param>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.#ctor">
            <summary>
                Creates a new pseudo-random number generator with a default seed.
            </summary>
            <remarks>
                <c>new <see cref="T:System.Random" />().<see cref="M:System.Random.Next" /></c>
                is used for the seed.
            </remarks>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.#ctor(System.Int32[])">
            <summary>
                Creates a pseudo-random number generator initialized with the given array.
            </summary>
            <param name="initKey">The array for <see cref="T:System.Int32" /> initializing keys.</param>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.GenerateUnsignedInteger">
            <summary>
                Generates a new pseudo-random <see cref="T:System.UInt32" />.
            </summary>
            <returns>A pseudo-random <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextUInt">
            <summary>
                Returns the next pseudo-random <see cref="T:System.UInt32" />.
            </summary>
            <returns>A pseudo-random <see cref="T:System.UInt32" /> value.</returns>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextUInt(System.UInt32)">
            <summary>
                Returns the next pseudo-random <see cref="T:System.UInt32" /> up to <paramref name="maxValue" />.
            </summary>
            <param name="maxValue">
                The maximum value of the pseudo-random number to create.
            </param>
            <returns>
                A pseudo-random <see cref="T:System.UInt32" /> value which is at most <paramref name="maxValue" />.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextUInt(System.UInt32,System.UInt32)">
            <summary>
                Returns the next pseudo-random <see cref="T:System.UInt32" /> at least
                <paramref name="minValue" /> and up to <paramref name="maxValue" />.
            </summary>
            <param name="minValue">The minimum value of the pseudo-random number to create.</param>
            <param name="maxValue">The maximum value of the pseudo-random number to create.</param>
            <returns>
                A pseudo-random <see cref="T:System.UInt32" /> value which is at least
                <paramref name="minValue" /> and at most <paramref name="maxValue" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                If <c><paramref name="minValue" /> &gt;= <paramref name="maxValue" /></c>.
            </exception>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.Next">
            <summary>
                Returns the next pseudo-random <see cref="T:System.Int32" />.
            </summary>
            <returns>A pseudo-random <see cref="T:System.Int32" /> value.</returns>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.Next(System.Int32)">
            <summary>
                Returns the next pseudo-random <see cref="T:System.Int32" /> up to <paramref name="maxValue" />.
            </summary>
            <param name="maxValue">The maximum value of the pseudo-random number to create.</param>
            <returns>
                A pseudo-random <see cref="T:System.Int32" /> value which is at most <paramref name="maxValue" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                When <paramref name="maxValue" /> &lt; 0.
            </exception>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.Next(System.Int32,System.Int32)">
            <summary>
                Returns the next pseudo-random <see cref="T:System.Int32" /> at least <paramref name="minValue" />
                and up to <paramref name="maxValue" />.
            </summary>
            <param name="minValue">The minimum value of the pseudo-random number to create.</param>
            <param name="maxValue">The maximum value of the pseudo-random number to create.</param>
            <returns>
                A pseudo-random <see cref="T:System.Int32" /> value which is at least <paramref name="minValue" /> and at
                most <paramref name="maxValue" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                If <c><paramref name="minValue" /> &gt;= <paramref name="maxValue" /></c>.
            </exception>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextBytes(System.Byte[])">
            <summary>
                Fills a buffer with pseudo-random <see cref="T:System.Byte" />.
            </summary>
            <param name="buffer">The buffer to fill.</param>
            <exception cref="T:System.ArgumentNullException">
                If <c><paramref name="buffer" /> == <see langword="null" /></c>.
            </exception>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextDouble">
            <summary>
                Returns the next pseudo-random <see cref="T:System.Double" /> value.
            </summary>
            <returns>A pseudo-random <see cref="T:System.Double" /> floating point value.</returns>
            <remarks>
                <para>
                    There are two common ways to create a double floating point using MT19937:
                    using <see cref="M:GDX.Mathematics.Random.MersenneTwister.GenerateUnsignedInteger" /> and dividing by 0xFFFFFFFF + 1,
                    or else generating two double words and shifting the first by 26 bits and
                    adding the second.
                </para>
                <para>
                    In a newer measurement of the randomness of MT19937 published in the
                    journal "Monte Carlo Methods and Applications, Vol. 12, No. 5-6, pp. 385 – 393 (2006)"
                    entitled "A Repetition Test for Pseudo-Random Number Generators",
                    it was found that the 32-bit version of generating a double fails at the 95%
                    confidence level when measuring for expected repetitions of a particular
                    number in a sequence of numbers generated by the algorithm.
                </para>
                <para>
                    Due to this, the 53-bit method is implemented here and the 32-bit method
                    of generating a double is not. If, for some reason,
                    the 32-bit method is needed, it can be generated by the following:
                    <code>
                        (System.Double)NextUInt32() / ((UInt64)UInt32.MaxValue + 1);
                    </code>
                </para>
            </remarks>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextDouble(System.Boolean)">
            <summary>
                Returns a pseudo-random <see cref="T:System.Double" /> number greater than or equal to zero, and
                either strictly less than one, or less than or equal to one,
                depending on the value of the given parameter.
            </summary>
            <param name="includeOne">
                If <see langword="true" />, the pseudo-random <see cref="T:System.Double" /> number returned will be
                less than or equal to one; otherwise, the pseudo-random number returned will
                be strictly less than one.
            </param>
            <returns>
                If <paramref name="includeOne" /> is <see langword="true" />, this method returns a
                <see cref="T:System.Double" />-precision pseudo-random number greater than or equal to zero, and less
                than or equal to one. If <paramref name="includeOne" /> is <see langword="false" />, this method
                returns a <see cref="T:System.Double" />-precision pseudo-random number greater than or equal to zero and
                strictly less than one.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextDoublePositive">
            <summary>
                Returns a pseudo-random <see cref="T:System.Double" /> number greater than 0.0 and less than 1.0.
            </summary>
            <returns>A pseudo-random <see cref="T:System.Double" /> number greater than 0.0 and less than 1.0.</returns>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextSingle">
            <summary>
                Returns a pseudo-random <see cref="T:System.Single" /> number between 0.0 and 1.0.
            </summary>
            <returns>
                A <see cref="T:System.Single" />-precision floating point number greater than or equal to 0.0,
                and less than 1.0.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextSingle(System.Boolean)">
            <summary>
                Returns a pseudo-random <see cref="T:System.Single" /> number greater than or equal to zero,
                and either strictly less than one, or less than or equal to one, depending on the value of the
                given boolean parameter.
            </summary>
            <param name="includeOne">
                If <see langword="true" />, the pseudo-random number returned will be
                less than or equal to one; otherwise, the pseudo-random number returned will
                be strictly less than one.
            </param>
            <returns>
                If <paramref name="includeOne" /> is <see langword="true" />, this method returns a
                <see cref="T:System.Single" />-precision pseudo-random number greater than or equal to zero, and less
                than or equal to one. If <paramref name="includeOne" /> is <see langword="false" />,
                this method returns a single-precision pseudo-random number greater than or equal to zero and
                strictly less than one.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextSinglePositive">
            <summary>
                Returns a pseudo-random positive <see cref="T:System.Single" /> number greater than 0.0 and less than 1.0.
            </summary>
            <returns>A pseudo-random number greater than 0.0 and less than 1.0.</returns>
        </member>
        <member name="M:GDX.Mathematics.Random.MersenneTwister.NextBoolean">
            <summary>
                Returns a pseudo-random <see cref="T:System.Boolean" />.
            </summary>
            <returns>A <see cref="T:System.Boolean" /> value of either true or false.</returns>
        </member>
        <member name="T:GDX.Mathematics.Rotate">
            <summary>
            A set of functionality to extend on Unity's on rotation based methods.
            </summary>
        </member>
        <member name="M:GDX.Mathematics.Rotate.Towards(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single,System.Single)">
            <summary>
            Create a quaternion based on a rotation from <paramref name="targetQuaternion"/> to <paramref name="otherQuaternion"/>.
            </summary>
            <param name="targetQuaternion">The source <see cref="T:UnityEngine.Quaternion"/>.</param>
            <param name="otherQuaternion">The destination <see cref="T:UnityEngine.Quaternion"/>.</param>
            <param name="rotationRate">How fast should the rotation occur.</param>
            <param name="elapsedTime">How long has elapsed since the rotation started.</param>
            <returns>A rotational value.</returns>
        </member>
        <member name="T:GDX.Mathematics.Byte2">
            <summary>
                A <see cref="T:System.Byte" /> vector.
            </summary>
        </member>
        <member name="F:GDX.Mathematics.Byte2.x">
            <summary>
                X <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="F:GDX.Mathematics.Byte2.y">
            <summary>
                Y <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(System.Int32,System.Int32)">
            <summary>
                Create a <see cref="T:GDX.Mathematics.Byte2" /> from two <see cref="T:System.Int32" /> values.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(System.Byte,System.Byte)">
            <summary>
                Constructs a <see cref="T:GDX.Mathematics.Byte2" /> from two <see cref="T:System.Byte" /> values.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(GDX.Mathematics.Byte2)">
            <summary>
                Constructs a <see cref="T:GDX.Mathematics.Byte2" /> from a <see cref="T:GDX.Mathematics.Byte2" /> value.
            </summary>
            <param name="xy">The value to copy.</param>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(System.Byte)">
            <summary>
                Constructs a <see cref="T:GDX.Mathematics.Byte2" /> from a single <see cref="T:System.Byte" /> value by assigning it to every component.
            </summary>
            <param name="v">The value to copy to <see cref="F:GDX.Mathematics.Byte2.x" /> and <see cref="F:GDX.Mathematics.Byte2.y" />.</param>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(System.Boolean)">
            <summary>
                Constructs a <see cref="T:GDX.Mathematics.Byte2" /> from a single <see cref="T:System.Boolean" /> value by converting it to <see cref="T:System.Byte" />
                and assigning it to every component.
            </summary>
            <param name="v">The <see cref="T:System.Boolean" /> value to transcribe.</param>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(System.Single)">
            <summary>
                Constructs a <see cref="T:GDX.Mathematics.Byte2" /> from a single <see cref="T:System.Single" /> value by converting it to <see cref="T:System.Byte" />
                and assigning it to every component.
            </summary>
            <param name="v">The <see cref="T:System.Single" /> value to transcribe.</param>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(System.Double)">
            <summary>
                Constructs a <see cref="T:GDX.Mathematics.Byte2" /> from a single <see cref="T:System.Double" /> value by converting it to <see cref="T:System.Byte" />
                and assigning it to every component.
            </summary>
            <param name="v">The <see cref="T:System.Double" /> value to transcribe.</param>
        </member>
        <member name="P:GDX.Mathematics.Byte2.xx">
            <summary>
                Get a new <see cref="T:GDX.Mathematics.Byte2" /> created with <see cref="F:GDX.Mathematics.Byte2.x" /> as both components.
            </summary>
        </member>
        <member name="P:GDX.Mathematics.Byte2.xy">
            <summary>
                Get a new <see cref="T:GDX.Mathematics.Byte2" /> created with identical components.
            </summary>
        </member>
        <member name="P:GDX.Mathematics.Byte2.yx">
            <summary>
                Get a new <see cref="T:GDX.Mathematics.Byte2" /> created with swapped components.
            </summary>
        </member>
        <member name="P:GDX.Mathematics.Byte2.yy">
            <summary>
                Get a new <see cref="T:GDX.Mathematics.Byte2" /> created with <see cref="F:GDX.Mathematics.Byte2.y" /> as both components.
            </summary>
        </member>
        <member name="P:GDX.Mathematics.Byte2.Item(System.Int32)">
            <summary>
                Get the <see cref="T:System.Byte" /> at the provided <paramref name="index" />.
            </summary>
            <param name="index">Returns the byte element at a specified index.</param>
            <exception cref="T:System.ArgumentException">Out of range check.</exception>
        </member>
        <member name="M:GDX.Mathematics.Byte2.Equals(GDX.Mathematics.Byte2)">
            <summary>
                Does the <see cref="T:GDX.Mathematics.Byte2" /> equal another <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="rhs">Target <see cref="T:GDX.Mathematics.Byte2" /> to compare with.</param>
            <returns>Returns true if the <see cref="T:GDX.Mathematics.Byte2" /> is equal to a given <see cref="T:GDX.Mathematics.Byte2" />, false otherwise.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.ToString(System.String,System.IFormatProvider)">
            <summary>
                Convert the <see cref="T:GDX.Mathematics.Byte2" /> to a <see cref="T:System.String" /> using the provided <paramref name="format" />.
            </summary>
            <param name="format">Specified format <see cref="T:System.String" />.</param>
            <param name="formatProvider">Culture-specific format information.</param>
            <returns>
                Returns a string representation of the <see cref="T:GDX.Mathematics.Byte2" /> using a specified format and culture-specific
                format information.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.Equals(System.Object)">
            <summary>
                Does the <see cref="T:GDX.Mathematics.Byte2" /> equal another <see cref="T:System.Object" /> (casted).
            </summary>
            <param name="o">Target <see cref="T:System.Object" /> to compare with.</param>
            <returns>Returns true if the <see cref="T:GDX.Mathematics.Byte2" /> is equal to a given <see cref="T:GDX.Mathematics.Byte2" />, false otherwise.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Implicit(System.Byte)~GDX.Mathematics.Byte2">
            <summary>
                Implicitly converts a single <see cref="T:System.Byte" /> value to a <see cref="T:GDX.Mathematics.Byte2" /> by assigning it to every
                component.
            </summary>
            <param name="v">The <see cref="T:System.Byte" /> value to transcribe.</param>
            <returns>A new <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Explicit(System.Boolean)~GDX.Mathematics.Byte2">
            <summary>
                Explicitly converts a single <see cref="T:System.Boolean" /> value to a <see cref="T:GDX.Mathematics.Byte2" /> by converting it to
                <see cref="T:System.Byte" /> and assigning it to every component.
            </summary>
            <param name="v">The <see cref="T:System.Boolean" /> value to transcribe.</param>
            <returns>A new <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Explicit(System.Single)~GDX.Mathematics.Byte2">
            <summary>
                Explicitly converts a single <see cref="T:System.Single" /> value to a <see cref="T:GDX.Mathematics.Byte2" /> by converting it to
                <see cref="T:System.Byte" /> and assigning it to every component.
            </summary>
            <param name="v">The <see cref="T:System.Single" /> value to transcribe.</param>
            <returns>A new <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Explicit(System.Double)~GDX.Mathematics.Byte2">
            <summary>
                Explicitly converts a single <see cref="T:System.Double" /> value to a <see cref="T:GDX.Mathematics.Byte2" /> by converting it to
                <see cref="T:System.Byte" /> and assigning it to every component.
            </summary>
            <param name="v">The <see cref="T:System.Double" /> value to transcribe.</param>
            <returns>A new <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Multiply(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Multiply two <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a  multiplication operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Multiply(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Multiply a <see cref="T:GDX.Mathematics.Byte2" /> by a <see cref="T:System.Byte" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a multiplication operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a
                <see cref="T:System.Byte" /> value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Multiply(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Multiply a <see cref="T:System.Byte" /> by a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a multiplication operation on a <see cref="T:System.Byte" /> and a
                <see cref="T:GDX.Mathematics.Byte2" /> value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Addition(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Add two <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of an addition operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Addition(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Add a <see cref="T:System.Byte" /> to both components of a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of an addition operation on an <see cref="T:GDX.Mathematics.Byte2" /> and an <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Addition(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Add a <see cref="T:GDX.Mathematics.Byte2" /> to a <see cref="T:System.Byte" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of an addition operation on an <see cref="T:System.Byte" /> value and an
                <see cref="T:GDX.Mathematics.Byte2" />.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Subtraction(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Subtract a <see cref="T:GDX.Mathematics.Byte2" /> from another <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a subtraction operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Subtraction(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Subtract a <see cref="T:System.Byte" /> from both components of a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a subtraction operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Subtraction(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Subtract both components of a <see cref="T:GDX.Mathematics.Byte2" /> from a <see cref="T:System.Byte" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a subtraction operation on an <see cref="T:System.Byte" /> value and an
                <see cref="T:GDX.Mathematics.Byte2" />.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Division(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Divide a <see cref="T:GDX.Mathematics.Byte2" /> by another <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a division operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Division(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Divide a <see cref="T:GDX.Mathematics.Byte2" /> by a <see cref="T:System.Byte" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a division operation on a <see cref="T:GDX.Mathematics.Byte2" /> and <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Division(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Divide a <see cref="T:System.Byte" /> by a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a division operation on a <see cref="T:System.Byte" /> value and
                <see cref="T:GDX.Mathematics.Byte2" />.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Modulus(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Modulus a <see cref="T:GDX.Mathematics.Byte2" /> by another <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a modulus operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Modulus(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Modulus a <see cref="T:GDX.Mathematics.Byte2" /> by a <see cref="T:System.Byte" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a modulus operation on a <see cref="T:GDX.Mathematics.Byte2" /> and <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Modulus(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Modulus a <see cref="T:System.Byte" /> by a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a modulus operation on a <see cref="T:System.Byte" /> value and
                <see cref="T:GDX.Mathematics.Byte2" />.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Increment(GDX.Mathematics.Byte2)">
            <summary>
                Increment <see cref="T:GDX.Mathematics.Byte2" /> values.
            </summary>
            <param name="val">Target <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of an increment operation on a <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Decrement(GDX.Mathematics.Byte2)">
            <summary>
                Decrement <see cref="T:GDX.Mathematics.Byte2" /> values.
            </summary>
            <param name="val">Target <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a decrement operation on a <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_UnaryNegation(GDX.Mathematics.Byte2)">
            <summary>
                Unary minus <see cref="T:GDX.Mathematics.Byte2" /> values.
            </summary>
            <param name="val">Target <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of an unary minus operation on a <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_UnaryPlus(GDX.Mathematics.Byte2)">
            <summary>
                Unary plus <see cref="T:GDX.Mathematics.Byte2" /> values.
            </summary>
            <param name="val">Target <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of an unary plus operation on a <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_OnesComplement(GDX.Mathematics.Byte2)">
            <summary>
                Bitwise NOT <see cref="T:GDX.Mathematics.Byte2" /> values.
            </summary>
            <param name="val">Target <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a bitwise NOT operation on a <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_BitwiseAnd(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Bitwise AND two <see cref="T:GDX.Mathematics.Byte2" /> values.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a bitwise AND operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_BitwiseAnd(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Bitwise AND a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a bitwise AND operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_BitwiseAnd(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Bitwise AND a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a bitwise AND operation on a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_BitwiseOr(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Bitwise OR two <see cref="T:GDX.Mathematics.Byte2" /> values.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a bitwise OR operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_BitwiseOr(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Bitwise OR a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a bitwise OR operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_BitwiseOr(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Bitwise OR a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a bitwise OR operation on a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_ExclusiveOr(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Bitwise XOR two <see cref="T:GDX.Mathematics.Byte2" /> values.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a bitwise EXCLUSIVE OR operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_ExclusiveOr(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Bitwise XOR a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a bitwise XOR operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_ExclusiveOr(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Bitwise XOR a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a bitwise XOR operation on a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.GetHashCode">
            <summary>
                Get a hash code from the <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>
                This loosely based on the Fowler–Noll–Vo (FNV) hash function.
            </remarks>
            <returns>A <see cref="T:System.Int32" /> value.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> representation of the <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
        </member>
        <member name="T:GDX.Mathematics.Byte2.DebuggerProxy">
            <summary>
                Debug object used by IDEs for visibility of a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
        </member>
        <member name="F:GDX.Mathematics.Byte2.DebuggerProxy.x">
            <summary>
                X <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="F:GDX.Mathematics.Byte2.DebuggerProxy.y">
            <summary>
                Y <see cref="T:System.Byte" />.
            </summary>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(Unity.Mathematics.bool2)">
            <summary>
                Constructs a <see cref="T:GDX.Mathematics.Byte2" /> from a <see cref="T:Unity.Mathematics.bool2" /> by conversion.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="v">The value to transcribe.</param>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(Unity.Mathematics.float2)">
            <summary>
                Constructs a <see cref="T:GDX.Mathematics.Byte2" /> from a <see cref="T:Unity.Mathematics.float2" /> by conversion.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="v">The value to transcribe.</param>
        </member>
        <member name="M:GDX.Mathematics.Byte2.#ctor(Unity.Mathematics.double2)">
            <summary>
                Constructs a <see cref="T:GDX.Mathematics.Byte2" /> from a <see cref="T:Unity.Mathematics.double2" /> by conversion.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="v">The value to transcribe.</param>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Explicit(Unity.Mathematics.bool2)~GDX.Mathematics.Byte2">
            <summary>
                Explicitly converts a <see cref="T:Unity.Mathematics.bool2" /> to a <see cref="T:GDX.Mathematics.Byte2" /> by conversion.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="v">The value to transcribe.</param>
            <returns>A new <see cref="T:GDX.Mathematics.Byte2" /> created from <paramref name="v" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Explicit(Unity.Mathematics.float2)~GDX.Mathematics.Byte2">
            <summary>
                Explicitly converts a <see cref="T:Unity.Mathematics.bool2" /> to a <see cref="T:GDX.Mathematics.Byte2" /> by conversion.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="v">The value to transcribe.</param>
            <returns>A new <see cref="T:GDX.Mathematics.Byte2" /> created from <paramref name="v" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Explicit(Unity.Mathematics.double2)~GDX.Mathematics.Byte2">
            <summary>
                Explicitly converts a <see cref="T:Unity.Mathematics.double2" /> to a <see cref="T:GDX.Mathematics.Byte2" /> by
                conversion.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="v">The value to transcribe.</param>
            <returns>A new <see cref="T:GDX.Mathematics.Byte2" /> created from <paramref name="v" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_LessThan(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Determine if one <see cref="T:GDX.Mathematics.Byte2" /> is less than another <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a LESS THAN operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_LessThan(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Determine if <see cref="T:GDX.Mathematics.Byte2" /> is less than a <see cref="T:System.Byte" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a LESS THAN operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_LessThan(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Determine if <see cref="T:System.Byte" /> is less than a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a LESS THAN operation on a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_LessThanOrEqual(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Determine if one <see cref="T:GDX.Mathematics.Byte2" /> is less than or equal to another <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a LESS THAN OR EQUAL operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_LessThanOrEqual(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Determine if <see cref="T:GDX.Mathematics.Byte2" /> is less than or equal a <see cref="T:System.Byte" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a LESS THAN OR EQUAL operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a
                <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_LessThanOrEqual(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Determine if <see cref="T:System.Byte" /> is less than or equal a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a LESS THAN OR EQUAL operation on a <see cref="T:System.Byte" /> and a
                <see cref="T:GDX.Mathematics.Byte2" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_GreaterThan(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Determine if one <see cref="T:GDX.Mathematics.Byte2" /> is less than another <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a LESS THAN operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_GreaterThan(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Determine if <see cref="T:GDX.Mathematics.Byte2" /> is greater than a <see cref="T:System.Byte" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a GREATER THAN operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_GreaterThan(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Determine if <see cref="T:System.Byte" /> is greater than a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a GREATER THAN operation on a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_GreaterThanOrEqual(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Determine if <see cref="T:GDX.Mathematics.Byte2" /> is greater than or equal a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a GREATER THAN OR EQUAL operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a
                <see cref="T:GDX.Mathematics.Byte2" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_GreaterThanOrEqual(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Determine if <see cref="T:GDX.Mathematics.Byte2" /> is greater than or equal a <see cref="T:System.Byte" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>
                Returns the result of a GREATER THAN OR EQUAL operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a
                <see cref="T:System.Byte" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_GreaterThanOrEqual(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Determine if <see cref="T:System.Byte" /> is greater than or equal a <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>
                Returns the result of a GREATER THAN OR EQUAL operation on a <see cref="T:System.Byte" /> and a
                <see cref="T:GDX.Mathematics.Byte2" />
                value.
            </returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Equality(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Determine if one <see cref="T:GDX.Mathematics.Byte2" /> is equal to another <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of an EQUALITY operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Equality(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Determine if both components of a <see cref="T:GDX.Mathematics.Byte2" /> are equal to a <see cref="T:System.Byte" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>Returns the result of an EQUALITY operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Equality(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Determine if both components of a <see cref="T:GDX.Mathematics.Byte2" /> are equal to a <see cref="T:System.Byte" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of an EQUALITY operation on a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Inequality(GDX.Mathematics.Byte2,GDX.Mathematics.Byte2)">
            <summary>
                Determine if one <see cref="T:GDX.Mathematics.Byte2" /> is not equal to another <see cref="T:GDX.Mathematics.Byte2" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a NOT EQUAL operation on two <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Inequality(GDX.Mathematics.Byte2,System.Byte)">
            <summary>
                Determine if both components of a <see cref="T:GDX.Mathematics.Byte2" /> are not equal to a <see cref="T:System.Byte" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <param name="rhs">Right-hand side <see cref="T:System.Byte" />.</param>
            <returns>Returns the result of a NOT EQUAL operation on a <see cref="T:GDX.Mathematics.Byte2" /> and a <see cref="T:System.Byte" />.</returns>
        </member>
        <member name="M:GDX.Mathematics.Byte2.op_Inequality(System.Byte,GDX.Mathematics.Byte2)">
            <summary>
                Determine if both components of a <see cref="T:GDX.Mathematics.Byte2" /> are not equal to a <see cref="T:System.Byte" />.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <param name="lhs">Left-hand side <see cref="T:System.Byte" />.</param>
            <param name="rhs">Right-hand side <see cref="T:GDX.Mathematics.Byte2" />.</param>
            <returns>Returns the result of a NOT EQUAL operation on a <see cref="T:System.Byte" /> and a <see cref="T:GDX.Mathematics.Byte2" />.</returns>
        </member>
        <member name="T:GDX.StringExtensions">
            <summary>
                <see cref="T:System.String" /> Based Extension Methods
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiCaseShift">
            <summary>
                The ASCII decimal value shift required to change the case of a letter.
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiLowerCaseStart">
            <summary>
                The ASCII decimal value for a.
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiLowerCaseEnd">
            <summary>
                The ASCII decimal value for lowercase z.
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiNumberSign">
            <summary>
                The ASCII decimal value for the number sign -.
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiNumberDecimal">
            <summary>
                The ASCII decimal value for the decimal (.).
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiNumberSeparator">
            <summary>
                The ASCII decimal value for the , separator.
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiNumberStart">
            <summary>
                The ASCII decimal value for 0.
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiNumberEnd">
            <summary>
                The ASCII decimal value for 9.
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiUpperCaseStart">
            <summary>
                The ASCII decimal value for uppercase A.
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.AsciiUpperCaseEnd">
            <summary>
                The ASCII  decimal value for uppercase Z.
            </summary>
        </member>
        <member name="F:GDX.StringExtensions.EncryptionDefaultKey">
            <summary>
                The default encryption key used when none is provided to the encryption related extensions.
            </summary>
            <remarks>
                You can change this at runtime during some sort of initialization pass to being something unique to your project,
                but it is not absolutely necessary. This must be a multiple of 8 bytes.
            </remarks>
        </member>
        <member name="F:GDX.StringExtensions.EncryptionInitializationVector">
            <summary>
                The IV (Initialization Vector) provided to the <see cref="T:System.Security.Cryptography.DESCryptoServiceProvider" />.
            </summary>
            <remarks>
                You can change this at runtime during some sort of initialization pass to being something unique to your project,
                but it is not absolutely necessary. This must be a multiple of 8 bytes.
            </remarks>
        </member>
        <member name="M:GDX.StringExtensions.Decrypt(System.String,System.Byte[])">
            <summary>
                Decrypt an encrypted <see cref="T:System.String" /> created by <see cref="M:GDX.StringExtensions.Encrypt(System.String,System.Byte[])" />.
            </summary>
            <remarks>This will have quite a few allocations.</remarks>
            <param name="encryptedString">The encrypted <see cref="T:System.String" />.</param>
            <param name="encryptionKey">The key used to encrypt the <see cref="T:System.String" />.</param>
            <returns>The decrypted <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:GDX.StringExtensions.Encrypt(System.String,System.Byte[])">
            <summary>
                Encrypt a <see cref="T:System.String" /> utilizing a <see cref="T:System.Security.Cryptography.DESCryptoServiceProvider" />.
            </summary>
            <remarks>This will have quite a few allocations.</remarks>
            <param name="decryptedString">The original <see cref="T:System.String" />.</param>
            <param name="encryptionKey">
                The key to be used when encrypting the <see cref="T:System.String" />.  This must be a
                multiple of 8 bytes.
            </param>
            <returns>The encrypted <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:GDX.StringExtensions.GetAfterFirst(System.String,System.String,System.StringComparison)">
            <summary>
                Get the <see cref="T:System.String" /> after the first identified <paramref name="splitString" /> in
                <paramref name="targetString" />.
            </summary>
            <param name="targetString">The target <see cref="T:System.String" /> to look in.</param>
            <param name="splitString">The divider which the <paramref name="targetString" /> should be split on.</param>
            <param name="comparison">Specifies the culture, case, and sort rules to be used.</param>
            <returns>
                The content following the <paramref name="splitString" />, or <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:GDX.StringExtensions.GetAfterLast(System.String,System.String,System.StringComparison)">
            <summary>
                Get the <see cref="T:System.String" /> after the last identified <paramref name="splitString" /> in
                <paramref name="targetString" />.
            </summary>
            <param name="targetString">The target <see cref="T:System.String" /> to look in.</param>
            <param name="splitString">The divider which the <paramref name="targetString" /> should be split on.</param>
            <param name="comparison">Specifies the culture, case, and sort rules to be used.</param>
            <returns>
                The content following the <paramref name="splitString" />, or <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:GDX.StringExtensions.GetBeforeFirst(System.String,System.String,System.StringComparison)">
            <summary>
                Get the <see cref="T:System.String" /> before the first identified <paramref name="splitString" /> in
                <paramref name="targetString" />.
            </summary>
            <param name="targetString">The target <see cref="T:System.String" /> to look in.</param>
            <param name="splitString">The divider which the <paramref name="targetString" /> should be split on.</param>
            <param name="comparison">Specifies the culture, case, and sort rules to be used.</param>
            <returns>The content before the <paramref name="splitString" />, or <c>null</c> if none is found.</returns>
        </member>
        <member name="M:GDX.StringExtensions.GetBeforeLast(System.String,System.String,System.StringComparison)">
            <summary>
                Get the <see cref="T:System.String" /> before the last identified <paramref name="splitString" /> in
                <paramref name="targetString" />.
            </summary>
            <param name="targetString">The target <see cref="T:System.String" /> to look in.</param>
            <param name="splitString">The divider which the <paramref name="targetString" /> should be split on.</param>
            <param name="comparison">Specifies the culture, case, and sort rules to be used.</param>
            <returns>The content before the <paramref name="splitString" />, or <c>null</c> if none is found.</returns>
        </member>
        <member name="M:GDX.StringExtensions.GetStableUpperCaseHashCode(System.String)">
            <summary>
                <para>
                    Get the stable hash code value of <paramref name="targetString" /> (converted to an uppercase
                    <see cref="T:System.String" />).
                </para>
            </summary>
            <remarks>
                This loosely based on the Fowler–Noll–Vo (FNV) hash function. It's value will be identical
                to the value produced natively by processing a <see cref="T:System.String" /> with
                <see cref="M:System.String.ToUpper" />.<see cref="M:System.String.GetHashCode" />, but with no
                allocations.
            </remarks>
            <param name="targetString">The target <see cref="T:System.String" />.</param>
            <returns>A <see cref="T:System.Int32" /> value.</returns>
        </member>
        <member name="M:GDX.StringExtensions.GetStableLowerCaseHashCode(System.String)">
            <summary>
                <para>
                    Get the stable hash code value of <paramref name="targetString" /> (converted to an uppercase
                    <see cref="T:System.String" />).
                </para>
            </summary>
            <remarks>
                This loosely based on the Fowler–Noll–Vo (FNV) hash function. It's value will be identical
                to the value produced natively by processing a <see cref="T:System.String" /> with
                <see cref="M:System.String.ToLower" />.<see cref="M:System.String.GetHashCode" />, but with no
                allocations.
            </remarks>
            <param name="targetString">The target <see cref="T:System.String" />.</param>
            <returns>A <see cref="T:System.Int32" /> value.</returns>
        </member>
        <member name="M:GDX.StringExtensions.HasLowerCase(System.String)">
            <summary>
                Determine if there are any lowercase letters in the provided <paramref name="targetString" />.
            </summary>
            <param name="targetString">The target <see cref="T:System.String" />.</param>
            <returns>true/false if lowercase letters were found.</returns>
        </member>
        <member name="M:GDX.StringExtensions.HasUpperCase(System.String)">
            <summary>
                Determine if there are any uppercase letters in the provided <paramref name="targetString" />.
            </summary>
            <param name="targetString">The target <see cref="T:System.String" />.</param>
            <returns>true/false if uppercase letters were found.</returns>
        </member>
        <member name="M:GDX.StringExtensions.IsBooleanValue(System.String)">
            <summary>
                Determine if the <paramref name="targetString" /> represents a boolean value arrangement.
            </summary>
            <param name="targetString">The target <see cref="T:System.String" />.</param>
            <returns>true/false if the <paramref name="targetString" /> can be evaluated as a boolean value.</returns>
        </member>
        <member name="M:GDX.StringExtensions.IsBooleanPositiveValue(System.String)">
            <summary>
                Determine if the <paramref name="targetString" /> represents a positive boolean value arrangement.
            </summary>
            <example>
                Useful method when trying to parse data for branching.
                <code>
                    if(data["set"].IsBooleanPositiveValue())
                    {
                        ShouldBlueBox();
                    }
                </code>
            </example>
            <param name="targetString">The target <see cref="T:System.String" />.</param>
            <returns>true/false if the <paramref name="targetString" /> can be evaluated as a positive boolean value.</returns>
        </member>
        <member name="M:GDX.StringExtensions.IsIntegerValue(System.String)">
            <summary>
                Determine if the <paramref name="targetString" /> is an <see cref="T:System.Int32" /> value.
            </summary>
            <remarks>
                This method is meant for when you do not actually need the value returned, merely an evaluation if
                the provided <paramref name="targetString" /> is an <see cref="T:System.Int32" />. This does not qualify
                <see cref="T:System.Single" /> values positively.
            </remarks>
            <param name="targetString">The target <see cref="T:System.String" />.</param>
            <returns>true/false if it contains an <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:GDX.StringExtensions.IsNumeric(System.String)">
            <summary>
                Is the <paramref name="targetString" /> a numeric value.
            </summary>
            <remarks>
                <para>
                    The following requirements must be met to be considered a valid number in this method:
                </para>
                <list type="bullet">
                    <item>
                        <description>
                            The first character may be an indicator of its sign, an explicit acceptance of <c>-</c> is made. If
                            prefixed with <c>+</c>, the number will be found invalid.
                        </description>
                    </item>
                    <item>
                        <description>A single decimal point <c>.</c> may be present in the <paramref name="targetString" />.</description>
                    </item>
                    <item>
                        <description>No alphabet characters are present in the <paramref name="targetString"/>.</description>
                    </item>
                </list>
            </remarks>
            <param name="targetString">The target <see cref="T:System.String" />.</param>
            <returns>true/false if the <paramref name="targetString" /> qualifies as a numeric value.</returns>
        </member>
        <member name="M:GDX.StringExtensions.CountOccurence(System.String,System.Char)">
            <summary>
                Counts the number of times the needle (<paramref name="targetCharacter"/>) appears in the haystack (<paramref name="targetString"/>).
            </summary>
            <remarks>Specifically created to avoid using LINQ and avoid an allocation.</remarks>
            <param name="targetString">The haystack.</param>
            <param name="targetCharacter">The needle.</param>
            <returns>The number of times <paramref name="targetCharacter"/> is found in <paramref name="targetString"/>.</returns>
        </member>
        <member name="M:GDX.StringExtensions.TryParseVector2(System.String,UnityEngine.Vector2@)">
            <summary>
                Attempt to parse a <see cref="T:System.String" /> into a <see cref="T:UnityEngine.Vector2" />.
            </summary>
            <remarks>This isn't great for runtime performance, it should be used predominantly when reconstructing data.</remarks>
            <param name="targetString">The <see cref="T:System.String" /> to convert into a <see cref="T:UnityEngine.Vector2" /> if possible.</param>
            <param name="outputVector2">The outputted <see cref="T:UnityEngine.Vector2" />.</param>
            <returns>true/false if the conversion was successful.</returns>
        </member>
        <member name="M:GDX.StringExtensions.TryParseVector3(System.String,UnityEngine.Vector3@)">
            <summary>
                Attempt to parse a <see cref="T:System.String" /> into a <see cref="T:UnityEngine.Vector3" />.
            </summary>
            <remarks>This isn't great for runtime performance, it should be used predominantly when reconstructing data.</remarks>
            <param name="targetString">The <see cref="T:System.String" /> to convert into a <see cref="T:UnityEngine.Vector3" /> if possible.</param>
            <param name="outputVector3">The outputted <see cref="T:UnityEngine.Vector3" />.</param>
            <returns>true/false if the conversion was successful.</returns>
        </member>
        <member name="M:GDX.StringExtensions.SplitCamelCase(System.String,System.String)">
            <summary>
                Create a new string, splitting an existing string up based on camel case formatting.
            </summary>
            <param name="targetString">The target <see cref="T:System.String" />.</param>
            <param name="divider">The <see cref="T:System.String" /> to put in between the split <see cref="T:System.String" />.</param>
            <returns>A new <see cref="T:System.String" />.</returns>
        </member>
        <member name="T:GDX.ByteExtensions">
            <summary>
                <see cref="T:System.Byte" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.ByteExtensions.GetStableHashCode(System.Byte[])">
            <summary>
                <para>Get the stable hash code of <paramref name="targetBytes" />, an array of <see cref="T:System.Byte" />.</para>
            </summary>
            <remarks>Does NOT get the object's hashcode.</remarks>
            <param name="targetBytes">The target array of <see cref="T:System.Byte" />.</param>
            <returns>A <see cref="T:System.Int32" /> value.</returns>
        </member>
        <member name="M:GDX.ByteExtensions.IsSame(System.Byte[],System.Byte[])">
            <summary>
                Are the two provided <see cref="T:System.Byte" /> arrays the same.
            </summary>
            <param name="sourceBytes">The left hand side <see cref="T:System.Byte" /> array to compare.</param>
            <param name="targetBytes">The right hand side <see cref="T:System.Byte" /> array to compare.</param>
            <returns>true if they are identical, will also return true if both are null.</returns>
        </member>
        <member name="T:GDX.Jobs.ParallelFor.IntegerBufferCopyJob">
            <summary>
                Copy one <see cref="T:Unity.Collections.NativeArray`1" /> typed as <see cref="T:System.Int32" /> to another in
                parallel.
            </summary>
            <remarks>
                <para>
                    The <see cref="T:GDX.Jobs.ParallelFor.IntegerBufferCopyJob" /> relies on the <see cref="T:Unity.Jobs.IJobParallelFor" /> which
                    requires UnityEngine.CoreModule.dll.
                </para>
            </remarks>
        </member>
        <member name="F:GDX.Jobs.ParallelFor.IntegerBufferCopyJob.Destination">
            <summary>
                <para>The destination <see cref="T:Unity.Collections.NativeArray`1" /> typed as <see cref="T:System.Int32" />.</para>
            </summary>
            <remarks>Write-only.</remarks>
        </member>
        <member name="F:GDX.Jobs.ParallelFor.IntegerBufferCopyJob.Source">
            <summary>
                <para>The source <see cref="T:Unity.Collections.NativeArray`1" /> typed as <see cref="T:System.Int32" />.</para>
            </summary>
            <remarks>Read-only.</remarks>
        </member>
        <member name="M:GDX.Jobs.ParallelFor.IntegerBufferCopyJob.Execute(System.Int32)">
            <summary>
            Executable work for the provided index.
            </summary>
            <param name="index">The index of the Parallel for loop at which to perform work.</param>
        </member>
        <member name="T:GDX.Jobs.ParallelFor.IntegerBufferSwapJob">
            <summary>
                Swaps a <see cref="T:Unity.Collections.NativeArray`1" /> typed as <see cref="T:System.Int32" /> with a another
                in parallel.
            </summary>
            <remarks>
                <para>
                    The <see cref="T:GDX.Jobs.ParallelFor.IntegerBufferSwapJob" /> relies on the <see cref="T:Unity.Jobs.IJobParallelFor" /> which
                    requires UnityEngine.CoreModule.dll.
                </para>
            </remarks>
        </member>
        <member name="F:GDX.Jobs.ParallelFor.IntegerBufferSwapJob.A">
            <summary>
                The left-hand side <see cref="T:Unity.Collections.NativeArray`1" /> typed as <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="F:GDX.Jobs.ParallelFor.IntegerBufferSwapJob.B">
            <summary>
                The right-hand side <see cref="T:Unity.Collections.NativeArray`1" /> typed as <see cref="T:System.Int32" />.
            </summary>
        </member>
        <member name="M:GDX.Jobs.ParallelFor.IntegerBufferSwapJob.Execute(System.Int32)">
            <summary>
            Executable work for the provided index.
            </summary>
            <param name="index">The index of the Parallel for loop at which to perform work.</param>
        </member>
        <member name="T:GDX.Jobs.ParallelFor.IntegerBufferFillJob">
            <summary>
                Fills a <see cref="T:Unity.Collections.NativeArray`1" /> typed as <see cref="T:System.Int32" /> with a value in
                parallel.
            </summary>
            <remarks>
                <para>
                    The <see cref="T:GDX.Jobs.ParallelFor.IntegerBufferFillJob" /> relies on the <see cref="T:Unity.Jobs.IJobParallelFor" /> which
                    requires UnityEngine.CoreModule.dll.
                </para>
            </remarks>
        </member>
        <member name="F:GDX.Jobs.ParallelFor.IntegerBufferFillJob.Buffer">
            <summary>
                <para>The <see cref="T:Unity.Collections.NativeArray`1" /> which is going to be filled.</para>
            </summary>
            <remarks>Write-only.</remarks>
        </member>
        <member name="F:GDX.Jobs.ParallelFor.IntegerBufferFillJob.FillValue">
            <summary>
                <para>The <see cref="T:System.Int32" /> value to fill the native array with.</para>
            </summary>
            <remarks>Read-only.</remarks>
        </member>
        <member name="M:GDX.Jobs.ParallelFor.IntegerBufferFillJob.Execute(System.Int32)">
            <summary>
            Executable work for the provided index.
            </summary>
            <param name="index">The index of the Parallel for loop at which to perform work.</param>
        </member>
        <member name="T:GDX.InspectorMessageBoxAttribute">
            <summary>
                Create a message box of information above the property in the inspector.
            </summary>
        </member>
        <member name="T:GDX.InspectorMessageBoxAttribute.MessageBoxType">
            <summary>
                Valid types of messages.
            </summary>
        </member>
        <member name="T:GDX.HideFromDocFXAttribute">
            <summary>
                Hide the attributed item from DocFX documentation generation.
            </summary>
            <example>
                <para>
                    For this to work a custom entry in a projects <c>filterConfig.yml</c> is necessary to define the exclusion.
                </para>
                <code>
                - exclude:
                    hasAttribute:
                    uid: GDX.HideFromDocFXAttribute
                </code>
            </example>
        </member>
        <member name="T:GDX.VisualScriptingCollectionAttribute">
            <summary>
                Indicate that the tagged <c>class</c> or <c>struct</c> should be considered as containing a collection when adding to Visual Scripting.
            </summary>
        </member>
        <member name="T:GDX.VisualScriptingExtensionAttribute">
            <summary>
                Indicate that the tagged <c>class</c> should be considered as containing extension methods when adding to Visual Scripting.
            </summary>
        </member>
        <member name="T:GDX.VisualScriptingTypeAttribute">
            <summary>
                Indicate that the tagged <c>class</c> or <c>struct</c> should be considered as containing a type when adding to Visual Scripting.
            </summary>
        </member>
        <member name="T:GDX.VisualScriptingUtilityAttribute">
            <summary>
                Indicate that the tagged <c>class</c> should be considered as containing utility functionality when adding to Visual Scripting.
            </summary>
        </member>
        <member name="T:GDX.DisableInInspectorAttribute">
            <summary>
                Make the field in the inspector disabled by toggling GUI.enabled before and after.
            </summary>
        </member>
        <member name="T:GDX.MeshExtensions">
            <summary>
                <see cref="T:UnityEngine.Mesh" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.MeshExtensions.CalculateVolume(UnityEngine.Mesh)">
            <summary>
                Determine the volume of a given mesh.
            </summary>
            <remarks>
                Based off of https://n-e-r-v-o-u-s.com/blog/?p=4415.
            </remarks>
            <param name="targetMesh">The mesh to evaluate for its volume.</param>
            <returns>The meshes volume.</returns>
        </member>
        <member name="T:GDX.RigidbodyExtensions">
            <summary>
                <see cref="T:UnityEngine.Rigidbody" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.RigidbodyExtensions.MomentOfInertia(UnityEngine.Rigidbody,UnityEngine.Vector3)">
            <summary>
                Get a <see cref="T:UnityEngine.Rigidbody" />'s moment of inertia for a <paramref name="targetAxis" />.
            </summary>
            <remarks>
                Provided <paramref name="targetAxis" /> must not be <see cref="P:UnityEngine.Vector3.zero" />.
            </remarks>
            <param name="targetRigidbody">The <see cref="T:UnityEngine.Rigidbody" /> to evaluate.</param>
            <param name="targetAxis">The axis use to calculate the moment of inertia.</param>
            <returns>The moment of inertia for the <paramref name="targetAxis" />.</returns>
        </member>
        <member name="T:GDX.GDXConfig">
            <summary>
                Project-wide configuration which is available at runtime.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
        </member>
        <member name="F:GDX.GDXConfig.s_runtimeInstance">
            <summary>
                A runtime only instance of <see cref="T:GDX.GDXConfig" />.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.updateProviderCheckForUpdates">
            <summary>
                Should GDX check for updates at editor time?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerCommandLineParserArgumentPrefix">
            <summary>
                What should be used to denote arguments in the command line?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerCommandLineParserArgumentSplit">
            <summary>
                What should be used to split arguments from their values in the command line?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerBuildInfoAssemblyDefinition">
            <summary>
                Ensure that there is an assembly definition wrapping the generated content.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerBuildInfoEnabled">
            <summary>
                Should the BuildInfo file be written during builds?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerBuildInfoPath">
            <summary>
                The path to output the BuildInfo file.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerBuildInfoNamespace">
            <summary>
                The namespace where the BuildInfo should be placed.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerBuildInfoBuildNumberArgument">
            <summary>
                The argument key for the build number to be passed to the BuildInfoGenerator.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerBuildInfoBuildDescriptionArgument">
            <summary>
                The argument key for the build description to be passed to the BuildInfoGenerator.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerBuildInfoBuildChangelistArgument">
            <summary>
                The argument key for the build's changelist to be passed to the BuildInfoGenerator.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerBuildInfoBuildTaskArgument">
            <summary>
                The argument key for the build's task to be passed to the BuildInfoGenerator.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.developerBuildInfoBuildStreamArgument">
            <summary>
                The argument key for the build's stream to be passed to the BuildInfoGenerator.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.environmentScriptingDefineSymbol">
            <summary>
                Should a GDX scripting define symbol be added to all target build groups.
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.traceDevelopmentLevels">
            <summary>
                What is the level of traces which should be processed and logged by GDX in the editor or development builds?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.traceDebugLevels">
            <summary>
                What is the level of traces which should be processed and logged by GDX in debug builds?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.traceReleaseLevels">
            <summary>
                What is the level of traces which should be processed and logged by GDX in release builds?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.traceDevelopmentOutputToUnityConsole">
            <summary>
                Should GDX based traces output to the Unity console in the editor or development builds?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.traceDebugOutputToUnityConsole">
            <summary>
                Should GDX based traces output to the Unity console in debug builds?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.localizationSetDefaultCulture">
            <summary>
                Should the default thread culture be set?
            </summary>
        </member>
        <member name="F:GDX.GDXConfig.localizationDefaultCulture">
            <summary>
                The language to set the default thread culture too.
            </summary>
        </member>
        <member name="M:GDX.GDXConfig.Get">
            <summary>
                Get a loaded instance of the <see cref="T:GDX.GDXConfig" /> from resources.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <returns>A instance of <see cref="T:GDX.GDXConfig" />.</returns>
        </member>
        <member name="T:GDX.Vector2Extensions">
            <summary>
                <see cref="T:UnityEngine.Vector2" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.Vector2Extensions.Approximately(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Is one <see cref="T:UnityEngine.Vector2" /> approximately similar to another <see cref="T:UnityEngine.Vector2" />?
            </summary>
            <remarks>Includes optimized Unity.Mathematics approach.</remarks>
            <param name="targetVector2">Point A</param>
            <param name="otherVector2">Point B</param>
            <returns>Are the two <see cref="T:UnityEngine.Vector2" /> approximately the same?</returns>
        </member>
        <member name="M:GDX.Vector2Extensions.Slope(UnityEngine.Vector2)">
            <summary>
            Get the slope of a <see cref="T:UnityEngine.Vector2"/>.
            </summary>
            <param name="targetVector2">The <see cref="T:UnityEngine.Vector2"/> to evaluate.</param>
            <returns>The slope value.</returns>
        </member>
        <member name="M:GDX.Vector2Extensions.Midpoint(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
                Get the midpoint between two <see cref="T:UnityEngine.Vector2" />s.
            </summary>
            <param name="targetVector2">Point A</param>
            <param name="otherVector2">Point B</param>
            <returns>The midpoint between <paramref name="targetVector2" /> and <paramref name="otherVector2" />.</returns>
        </member>
        <member name="M:GDX.Vector2Extensions.NearestIndex(UnityEngine.Vector2,UnityEngine.Vector2[])">
            <summary>
                Find the index of the <see cref="T:UnityEngine.Vector2" /> in <paramref name="otherVector2" /> that is nearest to the
                <paramref name="targetVector2" />.
            </summary>
            <param name="targetVector2">The <see cref="T:UnityEngine.Vector2" /> to use as the point of reference.</param>
            <param name="otherVector2">An array of <see cref="T:UnityEngine.Vector2" /> positions to evaluate for which one is nearest.</param>
            <returns>
                The index of the nearest <paramref name="otherVector2" /> element to <paramref name="targetVector2" />.
                Returning -1 if the the <paramref name="otherVector2" /> has no elements or is null.
            </returns>
        </member>
        <member name="T:GDX.ArrayExtensions">
            <summary>
                Array Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.ArrayExtensions.Clear``1(``0[])">
            <summary>
                Set all elements in an array to the default values.
            </summary>
            <remarks>
                This does not alter the <paramref name="targetArray"/>'s length.
            </remarks>
            <param name="targetArray">The array to be defaulted.</param>
            <typeparam name="T">The type of the array.</typeparam>
        </member>
        <member name="M:GDX.ArrayExtensions.FirstIndexOfItem``1(``0[],``0)">
            <summary>
                Find the first index of <paramref name="targetItem" /> in <paramref name="targetArray" />.
            </summary>
            <param name="targetArray">The array which to look in.</param>
            <param name="targetItem">The object to be found.</param>
            <typeparam name="T">The type of the array.</typeparam>
            <returns>The index of <paramref name="targetItem" /> in <paramref name="targetArray" />, or -1 if not found.</returns>
        </member>
        <member name="M:GDX.ArrayExtensions.FirstIndexOfValue``1(``0[],``0)">
            <summary>
                Find the first index of <paramref name="targetValue" /> in <paramref name="targetArray" />.
            </summary>
            <param name="targetArray">The array which to look in.</param>
            <param name="targetValue">The value to be found.</param>
            <typeparam name="T">The type of the array.</typeparam>
            <returns>The index of <paramref name="targetValue" /> in <paramref name="targetArray" />, or -1 if not found.</returns>
        </member>
        <member name="M:GDX.ArrayExtensions.LastIndexOfItem``1(``0[],``0)">
            <summary>
                Find the last index of <paramref name="targetItem" /> in <paramref name="targetArray" />.
            </summary>
            <param name="targetArray">The array which to look in.</param>
            <param name="targetItem">The object to be found.</param>
            <typeparam name="T">The type of the array.</typeparam>
            <returns>The index of <paramref name="targetItem" /> in <paramref name="targetArray" />, or -1 if not found.</returns>
        </member>
        <member name="M:GDX.ArrayExtensions.LastIndexOfValue``1(``0[],``0)">
            <summary>
                Find the last index of <paramref name="targetValue" /> in <paramref name="targetArray" />.
            </summary>
            <param name="targetArray">The array which to look in.</param>
            <param name="targetValue">The value to be found.</param>
            <typeparam name="T">The type of the array.</typeparam>
            <returns>The index of <paramref name="targetValue" /> in <paramref name="targetArray" />, or -1 if not found.</returns>
        </member>
        <member name="T:GDX.Vector3Extensions">
            <summary>
                <see cref="T:UnityEngine.Vector3" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.Vector3Extensions.Approximately(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
                Is one <see cref="T:UnityEngine.Vector3" /> approximately similar to another <see cref="T:UnityEngine.Vector3" />?
            </summary>
            <remarks>Includes optimized Unity.Mathematics approach.</remarks>
            <param name="targetVector3">Point A</param>
            <param name="otherVector3">Point B</param>
            <returns>Are the two <see cref="T:UnityEngine.Vector3" /> approximately the same?</returns>
        </member>
        <member name="M:GDX.Vector3Extensions.DistanceSqr(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
                Calculate the squared distance between two <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <remarks>
                <para>Based on https://en.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance.</para>
            </remarks>
            <param name="targetVector3">Point A</param>
            <param name="otherVector3">Point B</param>
            <returns>The squared distance.</returns>
        </member>
        <member name="M:GDX.Vector3Extensions.HorizontalDistance(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
                Get the horizontal distance between two <see cref="T:UnityEngine.Vector3"/> points.
            </summary>
            <remarks>Ignores the Y-axis completely.</remarks>
            <param name="targetVector3">Point A</param>
            <param name="otherVector3">Point B</param>
            <returns>The horizontal distance.</returns>
        </member>
        <member name="M:GDX.Vector3Extensions.DistanceToRay(UnityEngine.Vector3,UnityEngine.Ray)">
            <summary>
            Calculate the distance from a <see cref="T:UnityEngine.Vector3"/> to a <see cref="T:UnityEngine.Ray"/>.
            </summary>
            <param name="targetVector3">The position.</param>
            <param name="targetRay">The line.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:GDX.Vector3Extensions.Midpoint(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
                Get the midpoint between two <see cref="T:UnityEngine.Vector3" />s.
            </summary>
            <param name="targetVector3">Point A</param>
            <param name="otherVector3">Point B</param>
            <returns>The midpoint between <paramref name="targetVector3" /> and <paramref name="otherVector3" />.</returns>
        </member>
        <member name="M:GDX.Vector3Extensions.NearestIndex(UnityEngine.Vector3,UnityEngine.Vector3[])">
            <summary>
                Find the index of the <see cref="T:UnityEngine.Vector3" /> in <paramref name="otherVector3" /> that is nearest to the
                <paramref name="targetVector3" />.
            </summary>
            <param name="targetVector3">The <see cref="T:UnityEngine.Vector3" /> to use as the point of reference.</param>
            <param name="otherVector3">An array of <see cref="T:UnityEngine.Vector3" /> positions to evaluate for which one is nearest.</param>
            <returns>
                The index of the nearest <paramref name="otherVector3" /> element to <paramref name="targetVector3" />.
                Returning -1 if the the <paramref name="otherVector3" /> has no elements or is null.
            </returns>
        </member>
        <member name="T:GDX.Display">
            <summary>
                A collection of display related helper utilities.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
        </member>
        <member name="M:GDX.Display.GetScreenHeight">
            <summary>
                <para>Returns the actual screen height being rendered on the current platform.</para>
            </summary>
            <remarks>This resolves issues with scaled rendering.</remarks>
            <returns>The pixel height of the screen resolution.</returns>
        </member>
        <member name="M:GDX.Display.GetScreenWidth">
            <summary>
                <para>Returns the actual screen width being rendered on the current platform.</para>
            </summary>
            <remarks>This resolves issues with scaled rendering.</remarks>
            <returns>The pixel width of the screen resolution.</returns>
        </member>
        <member name="M:GDX.Display.IsHDRSupported">
            <summary>
                Does the current display device support HDR output?
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.Display.IsHDREnabled">
            <summary>
                Is HDR output currently enabled (and actively being used)?
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="T:GDX.EnumExtensions">
            <summary>
                Enumeration Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.EnumExtensions.HasFlags``1(``0*,``0*)">
            <summary>
                Determine if the provide flags (<paramref name="needles" />) are found in the <paramref name="haystack" />.
            </summary>
            <param name="haystack">A predefined flag based enumeration.</param>
            <param name="needles">A set of flags to search for in the predefined enumeration.</param>
            <typeparam name="T">The enumeration's type.</typeparam>
            <returns>true if the needles are found in the haystack, otherwise false.</returns>
        </member>
        <member name="M:GDX.EnumExtensions.HasFlags``1(``0,``0)">
            <summary>
                Determine if the provide flags (<paramref name="needles" />) are found in the <paramref name="haystack" />.
            </summary>
            <remarks>Faster then <see cref="M:System.Enum.HasFlag(System.Enum)"/>.</remarks>
            <param name="haystack">A predefined flag based enumeration.</param>
            <param name="needles">A set of flags to search for in the predefined enumeration.</param>
            <typeparam name="T">The enumeration's type.</typeparam>
            <returns>true if the needles are found in the haystack, otherwise false.</returns>
        </member>
        <member name="T:GDX.Platform">
            <summary>
                A collection of platform related helper utilities.
            </summary>
        </member>
        <member name="M:GDX.Platform.EnsureFolderHierarchyExists(System.String)">
            <summary>
                Validate that all directories are created for a given <paramref name="folderPath" />.
            </summary>
            <param name="folderPath">The path to process and validate.</param>
        </member>
        <member name="M:GDX.Platform.EnsureFileFolderHierarchyExists(System.String)">
            <summary>
                Validate that all parent directories are created for a given <paramref name="filePath" />.
            </summary>
            <param name="filePath">The path to process and validate.</param>
        </member>
        <member name="M:GDX.Platform.GetHardwareGeneration">
            <summary>
                Gets the current platforms hardware generation number?
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.Platform.IsFocused">
            <summary>
                Is the application focused?
            </summary>
            <remarks>
                There are issues on some platforms with getting an accurate reading.
            </remarks>
            <returns>true/false if the application has focus.</returns>
        </member>
        <member name="M:GDX.Platform.IsHeadless">
            <summary>
            Is the application running in headless mode?.
            </summary>
            <remarks>Useful for detecting running a server.</remarks>
            <returns>true/false if the application is without an initialized graphics device.</returns>
        </member>
        <member name="T:GDX.Memory">
            <summary>
                A collection of memory related helper utilities.
            </summary>
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
        </member>
        <member name="M:GDX.Memory.CleanUp">
            <summary>
                <para>Cleanup Memory</para>
                <list type="bullet">
                    <item>
                        <description>Mono Heap (Garbage Collection)</description>
                    </item>
                    <item>
                        <description>Unity Resources</description>
                    </item>
                </list>
            </summary>
            <remarks>
                <para>Requires UnityEngine.CoreModule.dll to function correctly.</para>
            </remarks>
        </member>
        <member name="M:GDX.Memory.CleanUpAsync">
            <inheritdoc cref="M:GDX.Memory.CleanUp" />
            <remarks>Requires UnityEngine.CoreModule.dll to function correctly.</remarks>
        </member>
        <member name="T:GDX.IO.Compression.TarFile">
            <summary>
            Provides static methods for extracting tar files and tarballs.
            </summary>
        </member>
        <member name="M:GDX.IO.Compression.TarFile.ExtractToDirectory(System.String,System.String,System.Boolean)">
            <summary>
                Extracts all the files in the specified tar/tarball to a directory on the file system.
            </summary>
            <example>
                A synchronous approach to extracting the contents of a file, to a folder:
                <code>TarFile.ExtractToDirectory("C:\Temp\DownloadCache.tar.gz", "C:\Saved");</code>
            </example>
            <param name="sourceArchiveFileName">The path to the archive that is to be extracted.</param>
            <param name="destinationDirectoryName">
                The path to the directory in which to place the extracted files, specified as a
                relative or absolute path. A relative path is interpreted as relative to the current working directory.
            </param>
            <param name="forceGZipDataFormat">Enforce inflating the file via a <see cref="T:System.IO.Compression.GZipStream" />.</param>
        </member>
        <member name="M:GDX.IO.Compression.TarFile.ExtractStream(System.IO.Stream,System.String)">
            <summary>
                Extract a tar formatted <see cref="T:System.IO.Stream"/> to the <paramref name="destinationDirectoryName" />.
            </summary>
            <param name="sourceStream">The <see cref="T:System.IO.Stream" /> which to extract from.</param>
            <param name="destinationDirectoryName">Output directory to write the files.</param>
        </member>
        <member name="T:GDX.NavMeshPathExtensions">
            <summary>
                <see cref="T:UnityEngine.AI.NavMeshPath" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.NavMeshPathExtensions.GetTotalDistance(UnityEngine.AI.NavMeshPath)">
            <summary>
                Get the total travel distance, from start to finish of a calculated <see cref="T:UnityEngine.AI.NavMeshPath" />.
            </summary>
            <remarks>The <see cref="P:UnityEngine.AI.NavMeshPath.corners" /> does allocate internally.</remarks>
            <param name="targetNavMeshPath">The calculated path to evaluate for its length.</param>
            <returns>The total distance of a calculated path.</returns>
        </member>
        <member name="M:GDX.NavMeshPathExtensions.GetTotalDistanceSqr(UnityEngine.AI.NavMeshPath)">
            <summary>
                Get the total squared distance, from start to finish of a calculated <see cref="T:UnityEngine.AI.NavMeshPath" />.
            </summary>
            <remarks>The <see cref="P:UnityEngine.AI.NavMeshPath.corners" /> does allocate internally.</remarks>
            <param name="targetNavMeshPath">The calculated path to evaluate for its squared length.</param>
            <returns>The total squared distance of a calculated path.</returns>
        </member>
        <member name="M:GDX.NavMeshPathExtensions.GetPositionAtDistance(UnityEngine.AI.NavMeshPath,System.Single)">
            <summary>
                Get a position along a <see cref="T:UnityEngine.AI.NavMeshPath" /> based on the travel distance along it.
            </summary>
            <param name="targetNavMeshPath">The calculated path to evaluate for the position.</param>
            <param name="distance">The distance along the calculated path to find the position at.</param>
            <returns>The position found on the <see cref="T:UnityEngine.AI.NavMeshPath" />.</returns>
        </member>
        <member name="M:GDX.NavMeshPathExtensions.GetPositionAtDistanceSqr(UnityEngine.AI.NavMeshPath,System.Single)">
            <summary>
                Get a position along a <see cref="T:UnityEngine.AI.NavMeshPath" /> based on the travel square distance along it.
            </summary>
            <param name="targetNavMeshPath">The calculated path to evaluate for the position.</param>
            <param name="distance">The distance along the calculated path to find the position at.</param>
            <returns>The position found on the <see cref="T:UnityEngine.AI.NavMeshPath" />.</returns>
        </member>
        <member name="T:GDX.SimpleListExtensions">
            <summary>
                <see cref="T:GDX.Collections.Generic.SimpleList`1" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.SimpleListExtensions.AddUncheckedUniqueItem``1(GDX.Collections.Generic.SimpleList{``0}@,``0)">
            <summary>
                Add an item to the <see cref="T:GDX.Collections.Generic.SimpleList`1" /> without checking the internal size,
                making sure that the item is not already contained in the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.
            </summary>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" /> to add to.</param>
            <param name="targetItem">The target class object to add.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if the operation was able to add the item successfully.</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.AddUncheckedUniqueValue``1(GDX.Collections.Generic.SimpleList{``0}@,``0)">
            <summary>
                Add a value to the <see cref="T:GDX.Collections.Generic.SimpleList`1" /> without checking the internal size,
                making sure that the value is not already contained in the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.
            </summary>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" /> to add to.</param>
            <param name="targetValue">The value to add.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if the operation was able to add the value successfully.</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.AddWithExpandCheckUniqueItem``1(GDX.Collections.Generic.SimpleList{``0}@,``0)">
            <summary>
                Add an item to the <see cref="T:GDX.Collections.Generic.SimpleList`1" /> with checking the internal size (expanding as necessary),
                making sure that the item is not already contained in the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.
            </summary>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" /> to add to.</param>
            <param name="targetItem">The target class object to add.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if the operation was able to add the item successfully.</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.AddWithExpandCheckUniqueValue``1(GDX.Collections.Generic.SimpleList{``0}@,``0)">
            <summary>
                Add a value to the <see cref="T:GDX.Collections.Generic.SimpleList`1" /> with checking the internal size (expanding as necessary),
                making sure that the value is not already contained in the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.
            </summary>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" /> to add to.</param>
            <param name="targetValue">The value to add.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if the operation was able to add the value successfully.</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.ContainsItem``1(GDX.Collections.Generic.SimpleList{``0}@,``0)">
            <summary>
                <para>Does <paramref name="targetSimpleList" /> contain <paramref name="targetItem" />?</para>
            </summary>
            <remarks>Avoids using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</remarks>
            <param name="targetSimpleList">The <see cref="T:GDX.Collections.Generic.SimpleList`1" /> to look in.</param>
            <param name="targetItem">The target class object to look for.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.ContainsValue``1(GDX.Collections.Generic.SimpleList{``0}@,System.Object)">
            <summary>
                <para>Does <paramref name="targetSimpleList" /> contain <paramref name="targetValue" />?</para>
            </summary>
            <remarks>
                WARNING: This will box the <paramref name="targetValue" />. You should probably write your own explicit
                implementation.
            </remarks>
            <param name="targetSimpleList">The <see cref="T:GDX.Collections.Generic.SimpleList`1" /> to look in.</param>
            <param name="targetValue">The value to look for.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.RemoveFirstItem``1(GDX.Collections.Generic.SimpleList{``0}@,``0)">
            <summary>
                <para>Removes the first <paramref name="targetItem" /> from the provided <paramref name="targetSimpleList" />.</para>
            </summary>
            <remarks>Avoids using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</remarks>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</param>
            <param name="targetItem">The target object to remove from the <paramref name="targetSimpleList" />.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if an item was removed.</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.RemoveFirstValue``1(GDX.Collections.Generic.SimpleList{``0}@,System.Object)">
            <summary>
                Removes the first <paramref name="targetValue" /> from the provided <paramref name="targetSimpleList" />.
            </summary>
            <remarks>
                <para>
                    WARNING: This will box the <paramref name="targetValue" />. You should probably write your own explicit
                    implementation.
                </para>
            </remarks>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</param>
            <param name="targetValue">The value to remove from the <paramref name="targetSimpleList" />.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if a value was removed.</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.RemoveItems``1(GDX.Collections.Generic.SimpleList{``0}@,``0)">
            <summary>
                <para>Removes all <paramref name="targetItem" /> from the provided <paramref name="targetSimpleList" />.</para>
            </summary>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</param>
            <param name="targetItem">The item to remove from the <paramref name="targetSimpleList" />.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if items were removed.</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.RemoveLastItem``1(GDX.Collections.Generic.SimpleList{``0}@,``0)">
            <summary>
                <para>Removes the last <paramref name="targetItem" /> from the provided <paramref name="targetSimpleList" />.</para>
            </summary>
            <remarks>Avoids using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</remarks>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</param>
            <param name="targetItem">The target object to remove from the <paramref name="targetSimpleList" />.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if an item was removed.</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.RemoveLastValue``1(GDX.Collections.Generic.SimpleList{``0}@,System.Object)">
            <summary>
                Removes the last <paramref name="targetValue" /> from the provided <paramref name="targetSimpleList" />.
            </summary>
            <remarks>
                <para>
                    WARNING: This will box the <paramref name="targetValue" />. You should probably write your own explicit
                    implementation.
                </para>
            </remarks>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</param>
            <param name="targetValue">The value to remove from the <paramref name="targetSimpleList" />.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if a value was removed.</returns>
        </member>
        <member name="M:GDX.SimpleListExtensions.RemoveValues``1(GDX.Collections.Generic.SimpleList{``0}@,System.Object)">
            <summary>
                Removes all <paramref name="targetValue" /> from the provided <paramref name="targetSimpleList" />.
            </summary>
            <remarks>
                <para>
                    WARNING: This will box the <paramref name="targetValue" />. You should probably write your own explicit
                    implementation.
                </para>
            </remarks>
            <param name="targetSimpleList">The target <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</param>
            <param name="targetValue">The value to remove from the <paramref name="targetSimpleList" />.</param>
            <typeparam name="T">The type of the <see cref="T:GDX.Collections.Generic.SimpleList`1" />.</typeparam>
            <returns>true/false if values were removed.</returns>
        </member>
        <member name="T:GDX.CapsuleColliderExtensions">
            <summary>
                <see cref="T:UnityEngine.CapsuleCollider" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.CapsuleColliderExtensions.Direction(UnityEngine.CapsuleCollider)">
            <summary>
                Get a <see cref="T:UnityEngine.Vector3" /> based orientation of the <paramref name="targetCapsuleCollider"/>.
            </summary>
            <param name="targetCapsuleCollider">The capsule collider</param>
            <returns>The direction of a <see cref="T:UnityEngine.CapsuleCollider"/> in its local space.</returns>
        </member>
        <member name="M:GDX.CapsuleColliderExtensions.OutSphereCenters(UnityEngine.CapsuleCollider,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
                Return into <paramref name="topPosition"/> and <paramref name="bottomPosition"/>, the respective world-space position of a <see cref="T:UnityEngine.CapsuleCollider"/>'s spheres centers.
            </summary>
            <param name="targetCapsuleCollider">The <see cref="T:UnityEngine.CapsuleCollider"/> having its spheres evaluated.</param>
            <param name="topPosition">The determined top spheres center position in world-space.</param>
            <param name="bottomPosition">The determined bottom spheres center position in world-space.</param>
        </member>
        <member name="T:GDX.AddressablesExtensions">
            <summary>
                Addressables Based Extension Methods
            </summary>
            <remarks>
                <para>Requires UnityEngine.CoreModule.dll to function correctly.</para>
                <para>Requires <c>com.unity.addressables</c> Package.</para>
            </remarks>
        </member>
        <member name="F:GDX.AddressablesExtensions.s_emptyAssetReference">
            <summary>
                An empty instance of an <see cref="T:UnityEngine.AddressableAssets.AssetReference" /> to be used for comparison.
            </summary>
        </member>
        <member name="M:GDX.AddressablesExtensions.CanInstantiate(UnityEngine.AddressableAssets.AssetReference)">
            <summary>
                <para>Can <paramref name="targetAssetReference" /> be instantiated at runtime?</para>
            </summary>
            <remarks>Checks that it is not empty, has a runtime key, and makes sure the key is valid.</remarks>
            <param name="targetAssetReference">The target <see cref="T:UnityEngine.AddressableAssets.AssetReference" />.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.AddressablesExtensions.CanRelease(UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle{UnityEngine.GameObject},System.Boolean)">
            <summary>
                Can the <paramref name="targetAsyncOperationHandle" /> be released?
            </summary>
            <param name="targetAsyncOperationHandle">
                A target <see cref="T:UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1" />
                typed as <see cref="T:UnityEngine.GameObject" />.
            </param>
            <param name="autoRelease">If it can, should the handle release?</param>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.AddressablesExtensions.HasRuntimeKey(UnityEngine.AddressableAssets.AssetReference)">
            <summary>
                <para>Does <paramref name="targetAssetReference" /> have a runtime key?</para>
            </summary>
            <remarks>Will return false if the reference is <see langword="null" />.</remarks>
            <param name="targetAssetReference">The target <see cref="T:UnityEngine.AddressableAssets.AssetReference" />.</param>
            <returns>true/false</returns>
        </member>
        <member name="M:GDX.AddressablesExtensions.IsEmpty(UnityEngine.AddressableAssets.AssetReference)">
            <summary>
                Is <paramref name="targetAssetReference" /> empty?
            </summary>
            <param name="targetAssetReference">The target <see cref="T:UnityEngine.AddressableAssets.AssetReference" />.</param>
            <returns>true/false</returns>
        </member>
        <member name="T:GDX.TransformExtensions">
            <summary>
                <see cref="T:UnityEngine.Transform" /> Based Extension Methods
            </summary>
            <remarks>
                Used for MonoBehaviour workflows.
            </remarks>
        </member>
        <member name="M:GDX.TransformExtensions.DestroyChildren(UnityEngine.Transform,System.Boolean,System.Boolean)">
            <summary>
                Destroy child <see cref="T:UnityEngine.Transform"/>.
            </summary>
            <param name="targetTransform">The parent <see cref="T:UnityEngine.Transform"/> to look at.</param>
            <param name="deactivateBeforeDestroy">Should the <paramref name="targetTransform"/> children's <see cref="T:UnityEngine.GameObject"/>s be deactivated before destroying? This can be used to immediately hide an object, that will be destroyed at the end of the frame.</param>
            <param name="destroyInactive">Should inactive <see cref="T:UnityEngine.GameObject"/> be destroyed as well?</param>
        </member>
        <member name="M:GDX.TransformExtensions.GetActiveChildCount(UnityEngine.Transform)">
            <summary>
            Get the number of immediate children active.
            </summary>
            <param name="targetTransform">The transform to look at's children.</param>
            <returns>The number of active children transforms.</returns>
        </member>
        <member name="M:GDX.TransformExtensions.GetFirstComponentInChildrenComplex``1(UnityEngine.Transform,System.Boolean,System.Int32,System.Int32)">
            <summary>
                Search recursively for a <see cref="T:UnityEngine.Component" /> on the <paramref name="targetTransform" />.
            </summary>
            <param name="targetTransform">The target <see cref="T:UnityEngine.Transform" /> to use as the base for the search.</param>
            <param name="includeInactive">
                Include inactive child <see cref="T:UnityEngine.GameObject" />s when looking for the
                <see cref="T:UnityEngine.Component" />.
            </param>
            <param name="currentDepth">Current level of recursion.</param>
            <param name="maxLevelsOfRecursion">
                The maximum levels of recursion when looking for a <see cref="T:UnityEngine.Component" />, -1 for
                infinite recursion.
            </param>
            <typeparam name="T">The target <see cref="T:UnityEngine.Component" /> type that is being looked for.</typeparam>
            <returns>The first found <see cref="T:UnityEngine.Component" />.</returns>
        </member>
        <member name="M:GDX.TransformExtensions.GetScenePath(UnityEngine.Transform)">
            <summary>
                Get an in scene path to the <paramref name="targetTransform"/>.
            </summary>
            <param name="targetTransform">The <see cref="T:UnityEngine.Transform"/> which to derive a path from.</param>
            <returns>A created path <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:GDX.Trace">
            <summary>
                Trace logging functionality.
            </summary>
        </member>
        <member name="T:GDX.Trace.TraceLevel">
            <summary>
            Trace Levels
            </summary>
        </member>
        <member name="F:GDX.Trace.TraceLevel.Info">
            <summary>
                A trivial informational entry.
            </summary>
        </member>
        <member name="F:GDX.Trace.TraceLevel.Log">
            <summary>
                An entry indicating something which might be useful to provide context.
            </summary>
        </member>
        <member name="F:GDX.Trace.TraceLevel.Warning">
            <summary>
                An issue has been found but handled.
            </summary>
        </member>
        <member name="F:GDX.Trace.TraceLevel.Error">
            <summary>
                An error has occurred which may be recoverable, but notification is required.
            </summary>
        </member>
        <member name="F:GDX.Trace.TraceLevel.Exception">
            <summary>
                An exception has occured and needs to be flagged up for resolution. The should never happen in a release
                environment.
            </summary>
        </member>
        <member name="F:GDX.Trace.TraceLevel.Assertion">
            <summary>
                An assertion based event has occured and has some sort of messaging to be recorded.
            </summary>
        </member>
        <member name="F:GDX.Trace.TraceLevel.Fatal">
            <summary>
                A fatal error has occured which needs to be logged, and the program will subsequently crash.
            </summary>
        </member>
        <member name="M:GDX.Trace.Output(GDX.Trace.TraceLevel,System.Object,UnityEngine.Object)">
            <summary>
                Log a trace message to the appropriate subscribers and the Unity console where applicable.
            </summary>
            <param name="level">The <see cref="T:GDX.Trace.TraceLevel" /> of the particular message.</param>
            <param name="traceObject">An <see cref="T:System.Object" /> representing the message to be recorded.</param>
            <param name="contextObject">An <see cref="T:UnityEngine.Object" /> indicating context for the given message.</param>
        </member>
        <member name="T:GDX.BoxColliderExtensions">
            <summary>
                <see cref="T:UnityEngine.BoxCollider" /> Based Extension Methods
            </summary>
        </member>
        <member name="M:GDX.BoxColliderExtensions.ContainsPosition(UnityEngine.BoxCollider,UnityEngine.Vector3)">
            <summary>
                Is the <paramref name="worldPosition"/> inside of the <paramref name="targetBoxCollider"/>?
            </summary>
            <param name="targetBoxCollider">The <see cref="T:UnityEngine.BoxCollider"/> to use for evaluation.</param>
            <param name="worldPosition">A <see cref="T:UnityEngine.Vector3"/> point in world space.</param>
            <returns>true/false if the world position is contained within the <paramref name="targetBoxCollider"/>.</returns>
        </member>
        <member name="T:GDX.GameObjectExtensions">
            <summary>
                <see cref="T:UnityEngine.GameObject" /> Based Extension Methods
            </summary>
            <remarks>
                Used for MonoBehaviour workflows.
            </remarks>
        </member>
        <member name="M:GDX.GameObjectExtensions.DestroyChildren(UnityEngine.GameObject,System.Boolean,System.Boolean)">
            <summary>
                Destroy child <see cref="T:UnityEngine.GameObject" />.
            </summary>
            <param name="targetGameObject">The parent <see cref="T:UnityEngine.GameObject" /> to look at.</param>
            <param name="deactivateBeforeDestroy">
                Should the <paramref name="targetGameObject" />'s children be deactivated before
                destroying? This can be used to immediately hide an object, that will be destroyed at the end of the frame.
            </param>
            <param name="destroyInactive">Should inactive <see cref="T:UnityEngine.GameObject" /> be destroyed as well?</param>
        </member>
        <member name="M:GDX.GameObjectExtensions.GetFirstComponentInChildrenComplex``1(UnityEngine.GameObject,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                A slightly more complex version of <see cref="M:UnityEngine.Component.GetComponentInChildren``1(System.Boolean)" /> which allows for
                different hinted search options.
            </summary>
            <remarks>
                <para>
                    If the <paramref name="maxLevelsOfRecursion" /> is set to 1; this will search the
                    <paramref name="targetGameObject" /> and its immediate children only.
                </para>
                <para>
                    The internal <see cref="M:UnityEngine.Component.GetComponentInChildren``1(System.Boolean)" /> has optimizations internally in engine
                    code which make it faster in different scenarios.
                </para>
            </remarks>
            <param name="targetGameObject">The target <see cref="T:UnityEngine.GameObject" /> to use as the base for the search.</param>
            <param name="lookInChildrenFirst">
                Should children <see cref="T:UnityEngine.GameObject" /> be searched before the
                <paramref name="targetGameObject" />'s <see cref="T:UnityEngine.GameObject" />.
            </param>
            <param name="includeInactive">
                Include inactive child <see cref="T:UnityEngine.GameObject" />s when looking for the
                <see cref="T:UnityEngine.Component" />.
            </param>
            <param name="maxLevelsOfRecursion">
                The maximum levels of recursion when looking for a <see cref="T:UnityEngine.Component" />, -1 for
                infinite recursion.
            </param>
            <typeparam name="T">The target <see cref="T:UnityEngine.Component" /> type that is being looked for.</typeparam>
            <returns>The first found <see cref="T:UnityEngine.Component" />.</returns>
        </member>
        <member name="M:GDX.GameObjectExtensions.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
                Get a component by type from a <paramref name="targetGameObject" />, if it is not found add and return it.
            </summary>
            <remarks>Adding a component at runtime is a performance nightmare. Use with caution!</remarks>
            <param name="targetGameObject">The <see cref="T:UnityEngine.GameObject" /> that we should query for the component.</param>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The component on the <paramref name="targetGameObject" />.</returns>
        </member>
        <member name="M:GDX.GameObjectExtensions.GetScenePath(UnityEngine.GameObject)">
            <summary>
                Get an in scene path to the <paramref name="targetGameObject" />.
            </summary>
            <param name="targetGameObject">The <see cref="T:UnityEngine.GameObject" /> which to derive a path from.</param>
            <returns>A created path <see cref="T:System.String" />.</returns>
        </member>
        <member name="T:GDX.MonoBehaviourExtensions">
            <summary>
                <see cref="T:UnityEngine.MonoBehaviour" /> Based Extension Methods
            </summary>
            <remarks>
                Used for MonoBehaviour workflows.
            </remarks>
        </member>
        <member name="M:GDX.MonoBehaviourExtensions.GetFirstComponentInChildrenComplex``1(UnityEngine.MonoBehaviour,System.Boolean,System.Boolean,System.Int32)">
            <summary>
                A slightly more complex version of <see cref="M:UnityEngine.Component.GetComponentInChildren``1(System.Boolean)" /> which allows for
                different hinted search options.
            </summary>
            <remarks>
                <para>
                    If the <paramref name="maxLevelsOfRecursion" /> is set to 1; this will search the
                    <paramref name="targetMonoBehaviour" /> and its immediate children only.
                </para>
                <para>
                    The internal <see cref="M:UnityEngine.Component.GetComponentInChildren``1(System.Boolean)" /> has optimizations internally in engine
                    code which make it faster in different scenarios.
                </para>
            </remarks>
            <typeparam name="T">The target <see cref="T:UnityEngine.Component" /> type that is being looked for.</typeparam>
            <param name="targetMonoBehaviour">The target <see cref="T:UnityEngine.MonoBehaviour" /> to use as the base for the search.</param>
            <param name="lookInChildrenFirst">
                Should children <see cref="T:UnityEngine.GameObject" /> be searched before the
                <paramref name="targetMonoBehaviour" />'s <see cref="T:UnityEngine.GameObject" />.
            </param>
            <param name="includeInactive">
                Include inactive child <see cref="T:UnityEngine.GameObject" />s when looking for the
                <see cref="T:UnityEngine.Component" />.
            </param>
            <param name="maxLevelsOfRecursion">
                The maximum levels of recursion when looking for a <see cref="T:UnityEngine.Component" />, -1 for
                infinite recursion.
            </param>
            <returns>The first found <see cref="T:UnityEngine.Component" />.</returns>
        </member>
    </members>
</doc>
